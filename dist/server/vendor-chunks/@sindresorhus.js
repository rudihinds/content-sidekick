"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sindresorhus";
exports.ids = ["vendor-chunks/@sindresorhus"];
exports.modules = {

/***/ "(rsc)/./node_modules/@sindresorhus/is/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sindresorhus/is/dist/index.js ***!
  \*****************************************************/
/***/ ((module, exports) => {

eval("\n/// <reference lib=\"es2018\"/>\n/// <reference lib=\"dom\"/>\n/// <reference types=\"node\"/>\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst typedArrayTypeNames = [\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Uint16Array\",\n    \"Int32Array\",\n    \"Uint32Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\"\n];\nfunction isTypedArrayName(name) {\n    return typedArrayTypeNames.includes(name);\n}\nconst objectTypeNames = [\n    \"Function\",\n    \"Generator\",\n    \"AsyncGenerator\",\n    \"GeneratorFunction\",\n    \"AsyncGeneratorFunction\",\n    \"AsyncFunction\",\n    \"Observable\",\n    \"Array\",\n    \"Buffer\",\n    \"Blob\",\n    \"Object\",\n    \"RegExp\",\n    \"Date\",\n    \"Error\",\n    \"Map\",\n    \"Set\",\n    \"WeakMap\",\n    \"WeakSet\",\n    \"ArrayBuffer\",\n    \"SharedArrayBuffer\",\n    \"DataView\",\n    \"Promise\",\n    \"URL\",\n    \"FormData\",\n    \"URLSearchParams\",\n    \"HTMLElement\",\n    ...typedArrayTypeNames\n];\nfunction isObjectTypeName(name) {\n    return objectTypeNames.includes(name);\n}\nconst primitiveTypeNames = [\n    \"null\",\n    \"undefined\",\n    \"string\",\n    \"number\",\n    \"bigint\",\n    \"boolean\",\n    \"symbol\"\n];\nfunction isPrimitiveTypeName(name) {\n    return primitiveTypeNames.includes(name);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n    return (value)=>typeof value === type;\n}\nconst { toString } = Object.prototype;\nconst getObjectType = (value)=>{\n    const objectTypeName = toString.call(value).slice(8, -1);\n    if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n        return \"HTMLElement\";\n    }\n    if (isObjectTypeName(objectTypeName)) {\n        return objectTypeName;\n    }\n    return undefined;\n};\nconst isObjectOfType = (type)=>(value)=>getObjectType(value) === type;\nfunction is(value) {\n    if (value === null) {\n        return \"null\";\n    }\n    switch(typeof value){\n        case \"undefined\":\n            return \"undefined\";\n        case \"string\":\n            return \"string\";\n        case \"number\":\n            return \"number\";\n        case \"boolean\":\n            return \"boolean\";\n        case \"function\":\n            return \"Function\";\n        case \"bigint\":\n            return \"bigint\";\n        case \"symbol\":\n            return \"symbol\";\n        default:\n    }\n    if (is.observable(value)) {\n        return \"Observable\";\n    }\n    if (is.array(value)) {\n        return \"Array\";\n    }\n    if (is.buffer(value)) {\n        return \"Buffer\";\n    }\n    const tagType = getObjectType(value);\n    if (tagType) {\n        return tagType;\n    }\n    if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n        throw new TypeError(\"Please don't use object wrappers for primitive types\");\n    }\n    return \"Object\";\n}\nis.undefined = isOfType(\"undefined\");\nis.string = isOfType(\"string\");\nconst isNumberType = isOfType(\"number\");\nis.number = (value)=>isNumberType(value) && !is.nan(value);\nis.bigint = isOfType(\"bigint\");\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.function_ = isOfType(\"function\");\nis.null_ = (value)=>value === null;\nis.class_ = (value)=>is.function_(value) && value.toString().startsWith(\"class \");\nis.boolean = (value)=>value === true || value === false;\nis.symbol = isOfType(\"symbol\");\nis.numericString = (value)=>is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\nis.array = (value, assertion)=>{\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    if (!is.function_(assertion)) {\n        return true;\n    }\n    return value.every(assertion);\n};\nis.buffer = (value)=>{\n    var _a, _b, _c, _d;\n    return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false;\n};\nis.blob = (value)=>isObjectOfType(\"Blob\")(value);\nis.nullOrUndefined = (value)=>is.null_(value) || is.undefined(value);\nis.object = (value)=>!is.null_(value) && (typeof value === \"object\" || is.function_(value));\nis.iterable = (value)=>{\n    var _a;\n    return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]);\n};\nis.asyncIterable = (value)=>{\n    var _a;\n    return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]);\n};\nis.generator = (value)=>{\n    var _a, _b;\n    return is.iterable(value) && is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.next) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.throw);\n};\nis.asyncGenerator = (value)=>is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.nativePromise = (value)=>isObjectOfType(\"Promise\")(value);\nconst hasPromiseAPI = (value)=>{\n    var _a, _b;\n    return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);\n};\nis.promise = (value)=>is.nativePromise(value) || hasPromiseAPI(value);\nis.generatorFunction = isObjectOfType(\"GeneratorFunction\");\nis.asyncGeneratorFunction = (value)=>getObjectType(value) === \"AsyncGeneratorFunction\";\nis.asyncFunction = (value)=>getObjectType(value) === \"AsyncFunction\";\n// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\nis.boundFunction = (value)=>is.function_(value) && !value.hasOwnProperty(\"prototype\");\nis.regExp = isObjectOfType(\"RegExp\");\nis.date = isObjectOfType(\"Date\");\nis.error = isObjectOfType(\"Error\");\nis.map = (value)=>isObjectOfType(\"Map\")(value);\nis.set = (value)=>isObjectOfType(\"Set\")(value);\nis.weakMap = (value)=>isObjectOfType(\"WeakMap\")(value);\nis.weakSet = (value)=>isObjectOfType(\"WeakSet\")(value);\nis.int8Array = isObjectOfType(\"Int8Array\");\nis.uint8Array = isObjectOfType(\"Uint8Array\");\nis.uint8ClampedArray = isObjectOfType(\"Uint8ClampedArray\");\nis.int16Array = isObjectOfType(\"Int16Array\");\nis.uint16Array = isObjectOfType(\"Uint16Array\");\nis.int32Array = isObjectOfType(\"Int32Array\");\nis.uint32Array = isObjectOfType(\"Uint32Array\");\nis.float32Array = isObjectOfType(\"Float32Array\");\nis.float64Array = isObjectOfType(\"Float64Array\");\nis.bigInt64Array = isObjectOfType(\"BigInt64Array\");\nis.bigUint64Array = isObjectOfType(\"BigUint64Array\");\nis.arrayBuffer = isObjectOfType(\"ArrayBuffer\");\nis.sharedArrayBuffer = isObjectOfType(\"SharedArrayBuffer\");\nis.dataView = isObjectOfType(\"DataView\");\nis.enumCase = (value, targetEnum)=>Object.values(targetEnum).includes(value);\nis.directInstanceOf = (instance, class_)=>Object.getPrototypeOf(instance) === class_.prototype;\nis.urlInstance = (value)=>isObjectOfType(\"URL\")(value);\nis.urlString = (value)=>{\n    if (!is.string(value)) {\n        return false;\n    }\n    try {\n        new URL(value); // eslint-disable-line no-new\n        return true;\n    } catch (_a) {\n        return false;\n    }\n};\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\nis.truthy = (value)=>Boolean(value);\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nis.falsy = (value)=>!value;\nis.nan = (value)=>Number.isNaN(value);\nis.primitive = (value)=>is.null_(value) || isPrimitiveTypeName(typeof value);\nis.integer = (value)=>Number.isInteger(value);\nis.safeInteger = (value)=>Number.isSafeInteger(value);\nis.plainObject = (value)=>{\n    // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n    if (toString.call(value) !== \"[object Object]\") {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.getPrototypeOf({});\n};\nis.typedArray = (value)=>isTypedArrayName(getObjectType(value));\nconst isValidLength = (value)=>is.safeInteger(value) && value >= 0;\nis.arrayLike = (value)=>!is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\nis.inRange = (value, range)=>{\n    if (is.number(range)) {\n        return value >= Math.min(0, range) && value <= Math.max(range, 0);\n    }\n    if (is.array(range) && range.length === 2) {\n        return value >= Math.min(...range) && value <= Math.max(...range);\n    }\n    throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n};\nconst NODE_TYPE_ELEMENT = 1;\nconst DOM_PROPERTIES_TO_CHECK = [\n    \"innerHTML\",\n    \"ownerDocument\",\n    \"style\",\n    \"attributes\",\n    \"nodeValue\"\n];\nis.domElement = (value)=>{\n    return is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every((property)=>property in value);\n};\nis.observable = (value)=>{\n    var _a, _b, _c, _d;\n    if (!value) {\n        return false;\n    }\n    // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n    if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n        return true;\n    }\n    if (value === ((_d = (_c = value)[\"@@observable\"]) === null || _d === void 0 ? void 0 : _d.call(_c))) {\n        return true;\n    }\n    return false;\n};\nis.nodeStream = (value)=>is.object(value) && is.function_(value.pipe) && !is.observable(value);\nis.infinite = (value)=>value === Infinity || value === -Infinity;\nconst isAbsoluteMod2 = (remainder)=>(value)=>is.integer(value) && Math.abs(value % 2) === remainder;\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\nis.emptyArray = (value)=>is.array(value) && value.length === 0;\nis.nonEmptyArray = (value)=>is.array(value) && value.length > 0;\nis.emptyString = (value)=>is.string(value) && value.length === 0;\nconst isWhiteSpaceString = (value)=>is.string(value) && !/\\S/.test(value);\nis.emptyStringOrWhitespace = (value)=>is.emptyString(value) || isWhiteSpaceString(value);\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyString = (value)=>is.string(value) && value.length > 0;\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyStringAndNotWhitespace = (value)=>is.string(value) && !is.emptyStringOrWhitespace(value);\nis.emptyObject = (value)=>is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\nis.nonEmptyObject = (value)=>is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\nis.emptySet = (value)=>is.set(value) && value.size === 0;\nis.nonEmptySet = (value)=>is.set(value) && value.size > 0;\nis.emptyMap = (value)=>is.map(value) && value.size === 0;\nis.nonEmptyMap = (value)=>is.map(value) && value.size > 0;\n// `PropertyKey` is any value that can be used as an object key (string, number, or symbol)\nis.propertyKey = (value)=>is.any([\n        is.string,\n        is.number,\n        is.symbol\n    ], value);\nis.formData = (value)=>isObjectOfType(\"FormData\")(value);\nis.urlSearchParams = (value)=>isObjectOfType(\"URLSearchParams\")(value);\nconst predicateOnArray = (method, predicate, values)=>{\n    if (!is.function_(predicate)) {\n        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n    }\n    if (values.length === 0) {\n        throw new TypeError(\"Invalid number of values\");\n    }\n    return method.call(values, predicate);\n};\nis.any = (predicate, ...values)=>{\n    const predicates = is.array(predicate) ? predicate : [\n        predicate\n    ];\n    return predicates.some((singlePredicate)=>predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\nis.all = (predicate, ...values)=>predicateOnArray(Array.prototype.every, predicate, values);\nconst assertType = (condition, description, value, options = {})=>{\n    if (!condition) {\n        const { multipleValues } = options;\n        const valuesMessage = multipleValues ? `received values of types ${[\n            ...new Set(value.map((singleValue)=>`\\`${is(singleValue)}\\``))\n        ].join(\", \")}` : `received value of type \\`${is(value)}\\``;\n        throw new TypeError(`Expected value which is \\`${description}\\`, ${valuesMessage}.`);\n    }\n};\nexports.assert = {\n    // Unknowns.\n    undefined: (value)=>assertType(is.undefined(value), \"undefined\", value),\n    string: (value)=>assertType(is.string(value), \"string\", value),\n    number: (value)=>assertType(is.number(value), \"number\", value),\n    bigint: (value)=>assertType(is.bigint(value), \"bigint\", value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function_: (value)=>assertType(is.function_(value), \"Function\", value),\n    null_: (value)=>assertType(is.null_(value), \"null\", value),\n    class_: (value)=>assertType(is.class_(value), \"Class\" /* class_ */ , value),\n    boolean: (value)=>assertType(is.boolean(value), \"boolean\", value),\n    symbol: (value)=>assertType(is.symbol(value), \"symbol\", value),\n    numericString: (value)=>assertType(is.numericString(value), \"string with a number\" /* numericString */ , value),\n    array: (value, assertion)=>{\n        const assert = assertType;\n        assert(is.array(value), \"Array\", value);\n        if (assertion) {\n            value.forEach(assertion);\n        }\n    },\n    buffer: (value)=>assertType(is.buffer(value), \"Buffer\", value),\n    blob: (value)=>assertType(is.blob(value), \"Blob\", value),\n    nullOrUndefined: (value)=>assertType(is.nullOrUndefined(value), \"null or undefined\" /* nullOrUndefined */ , value),\n    object: (value)=>assertType(is.object(value), \"Object\", value),\n    iterable: (value)=>assertType(is.iterable(value), \"Iterable\" /* iterable */ , value),\n    asyncIterable: (value)=>assertType(is.asyncIterable(value), \"AsyncIterable\" /* asyncIterable */ , value),\n    generator: (value)=>assertType(is.generator(value), \"Generator\", value),\n    asyncGenerator: (value)=>assertType(is.asyncGenerator(value), \"AsyncGenerator\", value),\n    nativePromise: (value)=>assertType(is.nativePromise(value), \"native Promise\" /* nativePromise */ , value),\n    promise: (value)=>assertType(is.promise(value), \"Promise\", value),\n    generatorFunction: (value)=>assertType(is.generatorFunction(value), \"GeneratorFunction\", value),\n    asyncGeneratorFunction: (value)=>assertType(is.asyncGeneratorFunction(value), \"AsyncGeneratorFunction\", value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    asyncFunction: (value)=>assertType(is.asyncFunction(value), \"AsyncFunction\", value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    boundFunction: (value)=>assertType(is.boundFunction(value), \"Function\", value),\n    regExp: (value)=>assertType(is.regExp(value), \"RegExp\", value),\n    date: (value)=>assertType(is.date(value), \"Date\", value),\n    error: (value)=>assertType(is.error(value), \"Error\", value),\n    map: (value)=>assertType(is.map(value), \"Map\", value),\n    set: (value)=>assertType(is.set(value), \"Set\", value),\n    weakMap: (value)=>assertType(is.weakMap(value), \"WeakMap\", value),\n    weakSet: (value)=>assertType(is.weakSet(value), \"WeakSet\", value),\n    int8Array: (value)=>assertType(is.int8Array(value), \"Int8Array\", value),\n    uint8Array: (value)=>assertType(is.uint8Array(value), \"Uint8Array\", value),\n    uint8ClampedArray: (value)=>assertType(is.uint8ClampedArray(value), \"Uint8ClampedArray\", value),\n    int16Array: (value)=>assertType(is.int16Array(value), \"Int16Array\", value),\n    uint16Array: (value)=>assertType(is.uint16Array(value), \"Uint16Array\", value),\n    int32Array: (value)=>assertType(is.int32Array(value), \"Int32Array\", value),\n    uint32Array: (value)=>assertType(is.uint32Array(value), \"Uint32Array\", value),\n    float32Array: (value)=>assertType(is.float32Array(value), \"Float32Array\", value),\n    float64Array: (value)=>assertType(is.float64Array(value), \"Float64Array\", value),\n    bigInt64Array: (value)=>assertType(is.bigInt64Array(value), \"BigInt64Array\", value),\n    bigUint64Array: (value)=>assertType(is.bigUint64Array(value), \"BigUint64Array\", value),\n    arrayBuffer: (value)=>assertType(is.arrayBuffer(value), \"ArrayBuffer\", value),\n    sharedArrayBuffer: (value)=>assertType(is.sharedArrayBuffer(value), \"SharedArrayBuffer\", value),\n    dataView: (value)=>assertType(is.dataView(value), \"DataView\", value),\n    enumCase: (value, targetEnum)=>assertType(is.enumCase(value, targetEnum), \"EnumCase\", value),\n    urlInstance: (value)=>assertType(is.urlInstance(value), \"URL\", value),\n    urlString: (value)=>assertType(is.urlString(value), \"string with a URL\" /* urlString */ , value),\n    truthy: (value)=>assertType(is.truthy(value), \"truthy\" /* truthy */ , value),\n    falsy: (value)=>assertType(is.falsy(value), \"falsy\" /* falsy */ , value),\n    nan: (value)=>assertType(is.nan(value), \"NaN\" /* nan */ , value),\n    primitive: (value)=>assertType(is.primitive(value), \"primitive\" /* primitive */ , value),\n    integer: (value)=>assertType(is.integer(value), \"integer\" /* integer */ , value),\n    safeInteger: (value)=>assertType(is.safeInteger(value), \"integer\" /* safeInteger */ , value),\n    plainObject: (value)=>assertType(is.plainObject(value), \"plain object\" /* plainObject */ , value),\n    typedArray: (value)=>assertType(is.typedArray(value), \"TypedArray\" /* typedArray */ , value),\n    arrayLike: (value)=>assertType(is.arrayLike(value), \"array-like\" /* arrayLike */ , value),\n    domElement: (value)=>assertType(is.domElement(value), \"HTMLElement\" /* domElement */ , value),\n    observable: (value)=>assertType(is.observable(value), \"Observable\", value),\n    nodeStream: (value)=>assertType(is.nodeStream(value), \"Node.js Stream\" /* nodeStream */ , value),\n    infinite: (value)=>assertType(is.infinite(value), \"infinite number\" /* infinite */ , value),\n    emptyArray: (value)=>assertType(is.emptyArray(value), \"empty array\" /* emptyArray */ , value),\n    nonEmptyArray: (value)=>assertType(is.nonEmptyArray(value), \"non-empty array\" /* nonEmptyArray */ , value),\n    emptyString: (value)=>assertType(is.emptyString(value), \"empty string\" /* emptyString */ , value),\n    emptyStringOrWhitespace: (value)=>assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\" /* emptyStringOrWhitespace */ , value),\n    nonEmptyString: (value)=>assertType(is.nonEmptyString(value), \"non-empty string\" /* nonEmptyString */ , value),\n    nonEmptyStringAndNotWhitespace: (value)=>assertType(is.nonEmptyStringAndNotWhitespace(value), \"non-empty string and not whitespace\" /* nonEmptyStringAndNotWhitespace */ , value),\n    emptyObject: (value)=>assertType(is.emptyObject(value), \"empty object\" /* emptyObject */ , value),\n    nonEmptyObject: (value)=>assertType(is.nonEmptyObject(value), \"non-empty object\" /* nonEmptyObject */ , value),\n    emptySet: (value)=>assertType(is.emptySet(value), \"empty set\" /* emptySet */ , value),\n    nonEmptySet: (value)=>assertType(is.nonEmptySet(value), \"non-empty set\" /* nonEmptySet */ , value),\n    emptyMap: (value)=>assertType(is.emptyMap(value), \"empty map\" /* emptyMap */ , value),\n    nonEmptyMap: (value)=>assertType(is.nonEmptyMap(value), \"non-empty map\" /* nonEmptyMap */ , value),\n    propertyKey: (value)=>assertType(is.propertyKey(value), \"PropertyKey\", value),\n    formData: (value)=>assertType(is.formData(value), \"FormData\", value),\n    urlSearchParams: (value)=>assertType(is.urlSearchParams(value), \"URLSearchParams\", value),\n    // Numbers.\n    evenInteger: (value)=>assertType(is.evenInteger(value), \"even integer\" /* evenInteger */ , value),\n    oddInteger: (value)=>assertType(is.oddInteger(value), \"odd integer\" /* oddInteger */ , value),\n    // Two arguments.\n    directInstanceOf: (instance, class_)=>assertType(is.directInstanceOf(instance, class_), \"T\" /* directInstanceOf */ , instance),\n    inRange: (value, range)=>assertType(is.inRange(value, range), \"in range\" /* inRange */ , value),\n    // Variadic functions.\n    any: (predicate, ...values)=>{\n        return assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\" /* any */ , values, {\n            multipleValues: true\n        });\n    },\n    all: (predicate, ...values)=>assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\" /* all */ , values, {\n            multipleValues: true\n        })\n};\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n    class: {\n        value: is.class_\n    },\n    function: {\n        value: is.function_\n    },\n    null: {\n        value: is.null_\n    }\n});\nObject.defineProperties(exports.assert, {\n    class: {\n        value: exports.assert.class_\n    },\n    function: {\n        value: exports.assert.function_\n    },\n    null: {\n        value: exports.assert.null_\n    }\n});\nexports[\"default\"] = is;\n// For CommonJS default export support\nmodule.exports = is;\nmodule.exports[\"default\"] = is;\nmodule.exports.assert = exports.assert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sindresorhus/is/dist/index.js\n");

/***/ })

};
;