"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/webcrypto-core";
exports.ids = ["vendor-chunks/webcrypto-core"];
exports.modules = {

/***/ "(rsc)/./node_modules/webcrypto-core/build/webcrypto-core.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/webcrypto-core/build/webcrypto-core.es.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AesCbcProvider: () => (/* binding */ AesCbcProvider),\n/* harmony export */   AesCmacProvider: () => (/* binding */ AesCmacProvider),\n/* harmony export */   AesCtrProvider: () => (/* binding */ AesCtrProvider),\n/* harmony export */   AesEcbProvider: () => (/* binding */ AesEcbProvider),\n/* harmony export */   AesGcmProvider: () => (/* binding */ AesGcmProvider),\n/* harmony export */   AesKwProvider: () => (/* binding */ AesKwProvider),\n/* harmony export */   AesProvider: () => (/* binding */ AesProvider),\n/* harmony export */   AlgorithmError: () => (/* binding */ AlgorithmError),\n/* harmony export */   BufferSourceConverter: () => (/* reexport safe */ pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter),\n/* harmony export */   Crypto: () => (/* binding */ Crypto),\n/* harmony export */   CryptoError: () => (/* binding */ CryptoError),\n/* harmony export */   CryptoKey: () => (/* binding */ CryptoKey),\n/* harmony export */   DesProvider: () => (/* binding */ DesProvider),\n/* harmony export */   EcCurves: () => (/* binding */ EcCurves),\n/* harmony export */   EcUtils: () => (/* binding */ EcUtils),\n/* harmony export */   EcdhEsProvider: () => (/* binding */ EcdhEsProvider),\n/* harmony export */   EcdhProvider: () => (/* binding */ EcdhProvider),\n/* harmony export */   EcdsaProvider: () => (/* binding */ EcdsaProvider),\n/* harmony export */   Ed25519Provider: () => (/* binding */ Ed25519Provider),\n/* harmony export */   EdDsaProvider: () => (/* binding */ EdDsaProvider),\n/* harmony export */   EllipticProvider: () => (/* binding */ EllipticProvider),\n/* harmony export */   HkdfProvider: () => (/* binding */ HkdfProvider),\n/* harmony export */   HmacProvider: () => (/* binding */ HmacProvider),\n/* harmony export */   JwkUtils: () => (/* binding */ JwkUtils),\n/* harmony export */   OperationError: () => (/* binding */ OperationError),\n/* harmony export */   Pbkdf2Provider: () => (/* binding */ Pbkdf2Provider),\n/* harmony export */   PemConverter: () => (/* binding */ PemConverter),\n/* harmony export */   ProviderCrypto: () => (/* binding */ ProviderCrypto),\n/* harmony export */   ProviderStorage: () => (/* binding */ ProviderStorage),\n/* harmony export */   RequiredPropertyError: () => (/* binding */ RequiredPropertyError),\n/* harmony export */   RsaOaepProvider: () => (/* binding */ RsaOaepProvider),\n/* harmony export */   RsaProvider: () => (/* binding */ RsaProvider),\n/* harmony export */   RsaPssProvider: () => (/* binding */ RsaPssProvider),\n/* harmony export */   RsaSsaProvider: () => (/* binding */ RsaSsaProvider),\n/* harmony export */   Shake128Provider: () => (/* binding */ Shake128Provider),\n/* harmony export */   Shake256Provider: () => (/* binding */ Shake256Provider),\n/* harmony export */   ShakeProvider: () => (/* binding */ ShakeProvider),\n/* harmony export */   SubtleCrypto: () => (/* binding */ SubtleCrypto),\n/* harmony export */   UnsupportedOperationError: () => (/* binding */ UnsupportedOperationError),\n/* harmony export */   X25519Provider: () => (/* binding */ X25519Provider),\n/* harmony export */   asn1: () => (/* binding */ index$1),\n/* harmony export */   isJWK: () => (/* binding */ isJWK),\n/* harmony export */   json: () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pvtsutils */ \"(rsc)/./node_modules/pvtsutils/build/index.es.js\");\n/* harmony import */ var _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @peculiar/asn1-schema */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/es2015/index.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/webcrypto-core/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @peculiar/json-schema */ \"(rsc)/./node_modules/@peculiar/json-schema/build/index.es.js\");\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! asn1js */ \"(rsc)/./node_modules/asn1js/build/index.es.js\");\n/*!\n Copyright (c) Peculiar Ventures, LLC\n*/ \n\n\n\n\n\nclass CryptoError extends Error {\n}\nclass AlgorithmError extends CryptoError {\n}\nclass UnsupportedOperationError extends CryptoError {\n    constructor(methodName){\n        super(`Unsupported operation: ${methodName ? `${methodName}` : \"\"}`);\n    }\n}\nclass OperationError extends CryptoError {\n}\nclass RequiredPropertyError extends CryptoError {\n    constructor(propName){\n        super(`${propName}: Missing required property`);\n    }\n}\nclass PemConverter {\n    static toArrayBuffer(pem) {\n        const base64 = pem.replace(/-{5}(BEGIN|END) .*-{5}/g, \"\").replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64(base64);\n    }\n    static toUint8Array(pem) {\n        const bytes = this.toArrayBuffer(pem);\n        return new Uint8Array(bytes);\n    }\n    static fromBufferSource(buffer, tag) {\n        const base64 = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64(buffer);\n        let sliced;\n        let offset = 0;\n        const rows = [];\n        while(offset < base64.length){\n            sliced = base64.slice(offset, offset + 64);\n            if (sliced.length) {\n                rows.push(sliced);\n            } else {\n                break;\n            }\n            offset += 64;\n        }\n        const upperCaseTag = tag.toUpperCase();\n        return `-----BEGIN ${upperCaseTag}-----\\n${rows.join(\"\\n\")}\\n-----END ${upperCaseTag}-----`;\n    }\n    static isPEM(data) {\n        return /-----BEGIN .+-----[A-Za-z0-9+/+=\\s\\n]+-----END .+-----/i.test(data);\n    }\n    static getTagName(pem) {\n        if (!this.isPEM(pem)) {\n            throw new Error(\"Bad parameter. Incoming data is not right PEM\");\n        }\n        const res = /-----BEGIN (.+)-----/.exec(pem);\n        if (!res) {\n            throw new Error(\"Cannot get tag from PEM\");\n        }\n        return res[1];\n    }\n    static hasTagName(pem, tagName) {\n        const tag = this.getTagName(pem);\n        return tagName.toLowerCase() === tag.toLowerCase();\n    }\n    static isCertificate(pem) {\n        return this.hasTagName(pem, \"certificate\");\n    }\n    static isCertificateRequest(pem) {\n        return this.hasTagName(pem, \"certificate request\");\n    }\n    static isCRL(pem) {\n        return this.hasTagName(pem, \"x509 crl\");\n    }\n    static isPublicKey(pem) {\n        return this.hasTagName(pem, \"public key\");\n    }\n}\nfunction isJWK(data) {\n    return typeof data === \"object\" && \"kty\" in data;\n}\nclass ProviderCrypto {\n    async digest(...args) {\n        this.checkDigest.apply(this, args);\n        return this.onDigest.apply(this, args);\n    }\n    checkDigest(algorithm, _data) {\n        this.checkAlgorithmName(algorithm);\n    }\n    async onDigest(_algorithm, _data) {\n        throw new UnsupportedOperationError(\"digest\");\n    }\n    async generateKey(...args) {\n        this.checkGenerateKey.apply(this, args);\n        return this.onGenerateKey.apply(this, args);\n    }\n    checkGenerateKey(algorithm, _extractable, keyUsages, ..._args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkGenerateKeyParams(algorithm);\n        if (!(keyUsages && keyUsages.length)) {\n            throw new TypeError(`Usages cannot be empty when creating a key.`);\n        }\n        let allowedUsages;\n        if (Array.isArray(this.usages)) {\n            allowedUsages = this.usages;\n        } else {\n            allowedUsages = this.usages.privateKey.concat(this.usages.publicKey);\n        }\n        this.checkKeyUsages(keyUsages, allowedUsages);\n    }\n    checkGenerateKeyParams(_algorithm) {}\n    async onGenerateKey(_algorithm, _extractable, _keyUsages, ..._args) {\n        throw new UnsupportedOperationError(\"generateKey\");\n    }\n    async sign(...args) {\n        this.checkSign.apply(this, args);\n        return this.onSign.apply(this, args);\n    }\n    checkSign(algorithm, key, _data, ..._args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(key, \"sign\");\n    }\n    async onSign(_algorithm, _key, _data, ..._args) {\n        throw new UnsupportedOperationError(\"sign\");\n    }\n    async verify(...args) {\n        this.checkVerify.apply(this, args);\n        return this.onVerify.apply(this, args);\n    }\n    checkVerify(algorithm, key, _signature, _data, ..._args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(key, \"verify\");\n    }\n    async onVerify(_algorithm, _key, _signature, _data, ..._args) {\n        throw new UnsupportedOperationError(\"verify\");\n    }\n    async encrypt(...args) {\n        this.checkEncrypt.apply(this, args);\n        return this.onEncrypt.apply(this, args);\n    }\n    checkEncrypt(algorithm, key, _data, options = {}, ..._args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(key, options.keyUsage ? \"encrypt\" : void 0);\n    }\n    async onEncrypt(_algorithm, _key, _data, ..._args) {\n        throw new UnsupportedOperationError(\"encrypt\");\n    }\n    async decrypt(...args) {\n        this.checkDecrypt.apply(this, args);\n        return this.onDecrypt.apply(this, args);\n    }\n    checkDecrypt(algorithm, key, _data, options = {}, ..._args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(key, options.keyUsage ? \"decrypt\" : void 0);\n    }\n    async onDecrypt(_algorithm, _key, _data, ..._args) {\n        throw new UnsupportedOperationError(\"decrypt\");\n    }\n    async deriveBits(...args) {\n        this.checkDeriveBits.apply(this, args);\n        return this.onDeriveBits.apply(this, args);\n    }\n    checkDeriveBits(algorithm, baseKey, length, options = {}, ..._args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(baseKey, options.keyUsage ? \"deriveBits\" : void 0);\n        if (length % 8 !== 0) {\n            throw new OperationError(\"length: Is not multiple of 8\");\n        }\n    }\n    async onDeriveBits(_algorithm, _baseKey, _length, ..._args) {\n        throw new UnsupportedOperationError(\"deriveBits\");\n    }\n    async exportKey(...args) {\n        this.checkExportKey.apply(this, args);\n        return this.onExportKey.apply(this, args);\n    }\n    checkExportKey(format, key, ..._args) {\n        this.checkKeyFormat(format);\n        this.checkCryptoKey(key);\n        if (!key.extractable) {\n            throw new CryptoError(\"key: Is not extractable\");\n        }\n    }\n    async onExportKey(_format, _key, ..._args) {\n        throw new UnsupportedOperationError(\"exportKey\");\n    }\n    async importKey(...args) {\n        this.checkImportKey.apply(this, args);\n        return this.onImportKey.apply(this, args);\n    }\n    checkImportKey(format, keyData, algorithm, _extractable, keyUsages, ..._args) {\n        this.checkKeyFormat(format);\n        this.checkKeyData(format, keyData);\n        this.checkAlgorithmName(algorithm);\n        this.checkImportParams(algorithm);\n        if (Array.isArray(this.usages)) {\n            this.checkKeyUsages(keyUsages, this.usages);\n        }\n    }\n    async onImportKey(_format, _keyData, _algorithm, _extractable, _keyUsages, ..._args) {\n        throw new UnsupportedOperationError(\"importKey\");\n    }\n    checkAlgorithmName(algorithm) {\n        if (algorithm.name.toLowerCase() !== this.name.toLowerCase()) {\n            throw new AlgorithmError(\"Unrecognized name\");\n        }\n    }\n    checkAlgorithmParams(_algorithm) {}\n    checkDerivedKeyParams(_algorithm) {}\n    checkKeyUsages(usages, allowed) {\n        for (const usage of usages){\n            if (allowed.indexOf(usage) === -1) {\n                throw new TypeError(\"Cannot create a key using the specified key usages\");\n            }\n        }\n    }\n    checkCryptoKey(key, keyUsage) {\n        this.checkAlgorithmName(key.algorithm);\n        if (keyUsage && key.usages.indexOf(keyUsage) === -1) {\n            throw new CryptoError(`key does not match that of operation`);\n        }\n    }\n    checkRequiredProperty(data, propName) {\n        if (!(propName in data)) {\n            throw new RequiredPropertyError(propName);\n        }\n    }\n    checkHashAlgorithm(algorithm, hashAlgorithms) {\n        for (const item of hashAlgorithms){\n            if (item.toLowerCase() === algorithm.name.toLowerCase()) {\n                return;\n            }\n        }\n        throw new OperationError(`hash: Must be one of ${hashAlgorithms.join(\", \")}`);\n    }\n    checkImportParams(_algorithm) {}\n    checkKeyFormat(format) {\n        switch(format){\n            case \"raw\":\n            case \"pkcs8\":\n            case \"spki\":\n            case \"jwk\":\n                break;\n            default:\n                throw new TypeError(\"format: Is invalid value. Must be 'jwk', 'raw', 'spki', or 'pkcs8'\");\n        }\n    }\n    checkKeyData(format, keyData) {\n        if (!keyData) {\n            throw new TypeError(\"keyData: Cannot be empty on empty on key importing\");\n        }\n        if (format === \"jwk\") {\n            if (!isJWK(keyData)) {\n                throw new TypeError(\"keyData: Is not JsonWebToken\");\n            }\n        } else if (!pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.isBufferSource(keyData)) {\n            throw new TypeError(\"keyData: Is not ArrayBufferView or ArrayBuffer\");\n        }\n    }\n    prepareData(data) {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);\n    }\n}\nclass AesProvider extends ProviderCrypto {\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"length\");\n        if (typeof algorithm.length !== \"number\") {\n            throw new TypeError(\"length: Is not of type Number\");\n        }\n        switch(algorithm.length){\n            case 128:\n            case 192:\n            case 256:\n                break;\n            default:\n                throw new TypeError(\"length: Must be 128, 192, or 256\");\n        }\n    }\n    checkDerivedKeyParams(algorithm) {\n        this.checkGenerateKeyParams(algorithm);\n    }\n}\nclass AesCbcProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-CBC\";\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"iv\");\n        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n            throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        if (algorithm.iv.byteLength !== 16) {\n            throw new TypeError(\"iv: Must have length 16 bytes\");\n        }\n    }\n}\nclass AesCmacProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-CMAC\";\n        this.usages = [\n            \"sign\",\n            \"verify\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"length\");\n        if (typeof algorithm.length !== \"number\") {\n            throw new TypeError(\"length: Is not a Number\");\n        }\n        if (algorithm.length < 1) {\n            throw new OperationError(\"length: Must be more than 0\");\n        }\n    }\n}\nclass AesCtrProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-CTR\";\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"counter\");\n        if (!(algorithm.counter instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.counter))) {\n            throw new TypeError(\"counter: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        if (algorithm.counter.byteLength !== 16) {\n            throw new TypeError(\"iv: Must have length 16 bytes\");\n        }\n        this.checkRequiredProperty(algorithm, \"length\");\n        if (typeof algorithm.length !== \"number\") {\n            throw new TypeError(\"length: Is not a Number\");\n        }\n        if (algorithm.length < 1) {\n            throw new OperationError(\"length: Must be more than 0\");\n        }\n    }\n}\nclass AesEcbProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-ECB\";\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n}\nclass AesGcmProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-GCM\";\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        var _a;\n        this.checkRequiredProperty(algorithm, \"iv\");\n        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n            throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        if (algorithm.iv.byteLength < 1) {\n            throw new OperationError(\"iv: Must have length more than 0 and less than 2^64 - 1\");\n        }\n        (_a = algorithm.tagLength) !== null && _a !== void 0 ? _a : algorithm.tagLength = 128;\n        switch(algorithm.tagLength){\n            case 32:\n            case 64:\n            case 96:\n            case 104:\n            case 112:\n            case 120:\n            case 128:\n                break;\n            default:\n                throw new OperationError(\"tagLength: Must be one of 32, 64, 96, 104, 112, 120 or 128\");\n        }\n    }\n}\nclass AesKwProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-KW\";\n        this.usages = [\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n}\nclass DesProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        if (this.ivSize) {\n            this.checkRequiredProperty(algorithm, \"iv\");\n            if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n                throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n            }\n            if (algorithm.iv.byteLength !== this.ivSize) {\n                throw new TypeError(`iv: Must have length ${this.ivSize} bytes`);\n            }\n        }\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"length\");\n        if (typeof algorithm.length !== \"number\") {\n            throw new TypeError(\"length: Is not of type Number\");\n        }\n        if (algorithm.length !== this.keySizeBits) {\n            throw new OperationError(`algorithm.length: Must be ${this.keySizeBits}`);\n        }\n    }\n    checkDerivedKeyParams(algorithm) {\n        this.checkGenerateKeyParams(algorithm);\n    }\n}\nclass RsaProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\n        }\n        const publicExponent = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64(algorithm.publicExponent);\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\n        }\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\n        if (algorithm.modulusLength % 8 || algorithm.modulusLength < 256 || algorithm.modulusLength > 16384) {\n            throw new TypeError(\"The modulus length must be a multiple of 8 bits and >= 256 and <= 16384\");\n        }\n    }\n    checkImportParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    }\n}\nclass RsaSsaProvider extends RsaProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSASSA-PKCS1-v1_5\";\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n    }\n}\nclass RsaPssProvider extends RsaProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSA-PSS\";\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"saltLength\");\n        if (typeof algorithm.saltLength !== \"number\") {\n            throw new TypeError(\"saltLength: Is not a Number\");\n        }\n        if (algorithm.saltLength < 0) {\n            throw new RangeError(\"saltLength: Must be positive number\");\n        }\n    }\n}\nclass RsaOaepProvider extends RsaProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSA-OAEP\";\n        this.usages = {\n            privateKey: [\n                \"decrypt\",\n                \"unwrapKey\"\n            ],\n            publicKey: [\n                \"encrypt\",\n                \"wrapKey\"\n            ]\n        };\n    }\n    checkAlgorithmParams(algorithm) {\n        if (algorithm.label && !(algorithm.label instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.label))) {\n            throw new TypeError(\"label: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n    }\n}\nclass EllipticProvider extends ProviderCrypto {\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"namedCurve\");\n        this.checkNamedCurve(algorithm.namedCurve);\n    }\n    checkNamedCurve(namedCurve) {\n        for (const item of this.namedCurves){\n            if (item.toLowerCase() === namedCurve.toLowerCase()) {\n                return;\n            }\n        }\n        throw new OperationError(`namedCurve: Must be one of ${this.namedCurves.join(\", \")}`);\n    }\n}\nclass EcdsaProvider extends EllipticProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"ECDSA\";\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n        this.namedCurves = [\n            \"P-256\",\n            \"P-384\",\n            \"P-521\",\n            \"K-256\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    }\n}\nconst KEY_TYPES = [\n    \"secret\",\n    \"private\",\n    \"public\"\n];\nclass CryptoKey {\n    static create(algorithm, type, extractable, usages) {\n        const key = new this();\n        key.algorithm = algorithm;\n        key.type = type;\n        key.extractable = extractable;\n        key.usages = usages;\n        return key;\n    }\n    static isKeyType(data) {\n        return KEY_TYPES.indexOf(data) !== -1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"CryptoKey\";\n    }\n}\nclass EcdhProvider extends EllipticProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"ECDH\";\n        this.usages = {\n            privateKey: [\n                \"deriveBits\",\n                \"deriveKey\"\n            ],\n            publicKey: []\n        };\n        this.namedCurves = [\n            \"P-256\",\n            \"P-384\",\n            \"P-521\",\n            \"K-256\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"public\");\n        if (!(algorithm.public instanceof CryptoKey)) {\n            throw new TypeError(\"public: Is not a CryptoKey\");\n        }\n        if (algorithm.public.type !== \"public\") {\n            throw new OperationError(\"public: Is not a public key\");\n        }\n        if (algorithm.public.algorithm.name !== this.name) {\n            throw new OperationError(`public: Is not ${this.name} key`);\n        }\n    }\n}\nclass EcdhEsProvider extends EcdhProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"ECDH-ES\";\n        this.namedCurves = [\n            \"X25519\",\n            \"X448\"\n        ];\n    }\n}\nclass EdDsaProvider extends EllipticProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"EdDSA\";\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n        this.namedCurves = [\n            \"Ed25519\",\n            \"Ed448\"\n        ];\n    }\n}\nlet ObjectIdentifier = class ObjectIdentifier {\n    constructor(value){\n        if (value) {\n            this.value = value;\n        }\n    }\n};\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.ObjectIdentifier\n    })\n], ObjectIdentifier.prototype, \"value\", void 0);\nObjectIdentifier = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice\n    })\n], ObjectIdentifier);\nclass AlgorithmIdentifier {\n    constructor(params){\n        Object.assign(this, params);\n    }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.ObjectIdentifier\n    })\n], AlgorithmIdentifier.prototype, \"algorithm\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any,\n        optional: true\n    })\n], AlgorithmIdentifier.prototype, \"parameters\", void 0);\nclass PrivateKeyInfo {\n    constructor(){\n        this.version = 0;\n        this.privateKeyAlgorithm = new AlgorithmIdentifier();\n        this.privateKey = new ArrayBuffer(0);\n    }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer\n    })\n], PrivateKeyInfo.prototype, \"version\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: AlgorithmIdentifier\n    })\n], PrivateKeyInfo.prototype, \"privateKeyAlgorithm\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString\n    })\n], PrivateKeyInfo.prototype, \"privateKey\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any,\n        optional: true\n    })\n], PrivateKeyInfo.prototype, \"attributes\", void 0);\nclass PublicKeyInfo {\n    constructor(){\n        this.publicKeyAlgorithm = new AlgorithmIdentifier();\n        this.publicKey = new ArrayBuffer(0);\n    }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: AlgorithmIdentifier\n    })\n], PublicKeyInfo.prototype, \"publicKeyAlgorithm\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString\n    })\n], PublicKeyInfo.prototype, \"publicKey\", void 0);\nconst JsonBase64UrlArrayBufferConverter = {\n    fromJSON: (value)=>pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(value),\n    toJSON: (value)=>pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(new Uint8Array(value))\n};\nconst AsnIntegerArrayBufferConverter = {\n    fromASN: (value)=>{\n        const valueHex = value.valueBlock.valueHex;\n        return !new Uint8Array(valueHex)[0] ? value.valueBlock.valueHex.slice(1) : value.valueBlock.valueHex;\n    },\n    toASN: (value)=>{\n        const valueHex = new Uint8Array(value)[0] > 127 ? (0,pvtsutils__WEBPACK_IMPORTED_MODULE_0__.combine)(new Uint8Array([\n            0\n        ]).buffer, value) : value;\n        return new asn1js__WEBPACK_IMPORTED_MODULE_3__.Integer({\n            valueHex\n        });\n    }\n};\nvar index$3 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter,\n    JsonBase64UrlArrayBufferConverter: JsonBase64UrlArrayBufferConverter\n});\nclass RsaPrivateKey {\n    constructor(){\n        this.version = 0;\n        this.modulus = new ArrayBuffer(0);\n        this.publicExponent = new ArrayBuffer(0);\n        this.privateExponent = new ArrayBuffer(0);\n        this.prime1 = new ArrayBuffer(0);\n        this.prime2 = new ArrayBuffer(0);\n        this.exponent1 = new ArrayBuffer(0);\n        this.exponent2 = new ArrayBuffer(0);\n        this.coefficient = new ArrayBuffer(0);\n    }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnIntegerConverter\n    })\n], RsaPrivateKey.prototype, \"version\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"n\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"modulus\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"e\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"publicExponent\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"d\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"privateExponent\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"p\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"prime1\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"q\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"prime2\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"dp\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"exponent1\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"dq\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"exponent2\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"qi\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"coefficient\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any,\n        optional: true\n    })\n], RsaPrivateKey.prototype, \"otherPrimeInfos\", void 0);\nclass RsaPublicKey {\n    constructor(){\n        this.modulus = new ArrayBuffer(0);\n        this.publicExponent = new ArrayBuffer(0);\n    }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"n\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPublicKey.prototype, \"modulus\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        name: \"e\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPublicKey.prototype, \"publicExponent\", void 0);\nlet EcPublicKey = class EcPublicKey {\n    constructor(value){\n        this.value = new ArrayBuffer(0);\n        if (value) {\n            this.value = value;\n        }\n    }\n    toJSON() {\n        let bytes = new Uint8Array(this.value);\n        if (bytes[0] !== 0x04) {\n            throw new CryptoError(\"Wrong ECPoint. Current version supports only Uncompressed (0x04) point\");\n        }\n        bytes = new Uint8Array(this.value.slice(1));\n        const size = bytes.length / 2;\n        const offset = 0;\n        const json = {\n            x: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(bytes.buffer.slice(offset, offset + size)),\n            y: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(bytes.buffer.slice(offset + size, offset + size + size))\n        };\n        return json;\n    }\n    fromJSON(json) {\n        if (!(\"x\" in json)) {\n            throw new Error(\"x: Missing required property\");\n        }\n        if (!(\"y\" in json)) {\n            throw new Error(\"y: Missing required property\");\n        }\n        const x = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.x);\n        const y = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.y);\n        const value = (0,pvtsutils__WEBPACK_IMPORTED_MODULE_0__.combine)(new Uint8Array([\n            0x04\n        ]).buffer, x, y);\n        this.value = new Uint8Array(value).buffer;\n        return this;\n    }\n};\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString\n    })\n], EcPublicKey.prototype, \"value\", void 0);\nEcPublicKey = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice\n    })\n], EcPublicKey);\nclass EcPrivateKey {\n    constructor(){\n        this.version = 1;\n        this.privateKey = new ArrayBuffer(0);\n    }\n    fromJSON(json) {\n        if (!(\"d\" in json)) {\n            throw new Error(\"d: Missing required property\");\n        }\n        this.privateKey = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.d);\n        if (\"x\" in json) {\n            const publicKey = new EcPublicKey();\n            publicKey.fromJSON(json);\n            const asn = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnSerializer.toASN(publicKey);\n            if (\"valueHex\" in asn.valueBlock) {\n                this.publicKey = asn.valueBlock.valueHex;\n            }\n        }\n        return this;\n    }\n    toJSON() {\n        const jwk = {};\n        jwk.d = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(this.privateKey);\n        if (this.publicKey) {\n            Object.assign(jwk, new EcPublicKey(this.publicKey).toJSON());\n        }\n        return jwk;\n    }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnIntegerConverter\n    })\n], EcPrivateKey.prototype, \"version\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString\n    })\n], EcPrivateKey.prototype, \"privateKey\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        context: 0,\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any,\n        optional: true\n    })\n], EcPrivateKey.prototype, \"parameters\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        context: 1,\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString,\n        optional: true\n    })\n], EcPrivateKey.prototype, \"publicKey\", void 0);\nconst AsnIntegerWithoutPaddingConverter = {\n    fromASN: (value)=>{\n        const bytes = new Uint8Array(value.valueBlock.valueHex);\n        return bytes[0] === 0 ? bytes.buffer.slice(1) : bytes.buffer;\n    },\n    toASN: (value)=>{\n        const bytes = new Uint8Array(value);\n        if (bytes[0] > 127) {\n            const newValue = new Uint8Array(bytes.length + 1);\n            newValue.set(bytes, 1);\n            return new asn1js__WEBPACK_IMPORTED_MODULE_3__.Integer({\n                valueHex: newValue.buffer\n            });\n        }\n        return new asn1js__WEBPACK_IMPORTED_MODULE_3__.Integer({\n            valueHex: value\n        });\n    }\n};\nvar index$2 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AsnIntegerWithoutPaddingConverter: AsnIntegerWithoutPaddingConverter\n});\nclass EcUtils {\n    static decodePoint(data, pointSize) {\n        const view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(data);\n        if (view.length === 0 || view[0] !== 4) {\n            throw new Error(\"Only uncompressed point format supported\");\n        }\n        const n = (view.length - 1) / 2;\n        if (n !== Math.ceil(pointSize / 8)) {\n            throw new Error(\"Point does not match field size\");\n        }\n        const xb = view.slice(1, n + 1);\n        const yb = view.slice(n + 1, n + 1 + n);\n        return {\n            x: xb,\n            y: yb\n        };\n    }\n    static encodePoint(point, pointSize) {\n        const size = Math.ceil(pointSize / 8);\n        if (point.x.byteLength !== size || point.y.byteLength !== size) {\n            throw new Error(\"X,Y coordinates don't match point size criteria\");\n        }\n        const x = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(point.x);\n        const y = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(point.y);\n        const res = new Uint8Array(size * 2 + 1);\n        res[0] = 4;\n        res.set(x, 1);\n        res.set(y, size + 1);\n        return res;\n    }\n    static getSize(pointSize) {\n        return Math.ceil(pointSize / 8);\n    }\n    static encodeSignature(signature, pointSize) {\n        const size = this.getSize(pointSize);\n        const r = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(signature.r);\n        const s = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(signature.s);\n        const res = new Uint8Array(size * 2);\n        res.set(this.padStart(r, size));\n        res.set(this.padStart(s, size), size);\n        return res;\n    }\n    static decodeSignature(data, pointSize) {\n        const size = this.getSize(pointSize);\n        const view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(data);\n        if (view.length !== size * 2) {\n            throw new Error(\"Incorrect size of the signature\");\n        }\n        const r = view.slice(0, size);\n        const s = view.slice(size);\n        return {\n            r: this.trimStart(r),\n            s: this.trimStart(s)\n        };\n    }\n    static trimStart(data) {\n        let i = 0;\n        while(i < data.length - 1 && data[i] === 0){\n            i++;\n        }\n        if (i === 0) {\n            return data;\n        }\n        return data.slice(i, data.length);\n    }\n    static padStart(data, size) {\n        if (size === data.length) {\n            return data;\n        }\n        const res = new Uint8Array(size);\n        res.set(data, size - data.length);\n        return res;\n    }\n}\nclass EcDsaSignature {\n    constructor(){\n        this.r = new ArrayBuffer(0);\n        this.s = new ArrayBuffer(0);\n    }\n    static fromWebCryptoSignature(value) {\n        const pointSize = value.byteLength / 2;\n        const point = EcUtils.decodeSignature(value, pointSize * 8);\n        const ecSignature = new EcDsaSignature();\n        ecSignature.r = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(point.r);\n        ecSignature.s = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(point.s);\n        return ecSignature;\n    }\n    toWebCryptoSignature(pointSize) {\n        pointSize !== null && pointSize !== void 0 ? pointSize : pointSize = Math.max(this.r.byteLength, this.s.byteLength) * 8;\n        const signature = EcUtils.encodeSignature(this, pointSize);\n        return signature.buffer;\n    }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerWithoutPaddingConverter\n    })\n], EcDsaSignature.prototype, \"r\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer,\n        converter: AsnIntegerWithoutPaddingConverter\n    })\n], EcDsaSignature.prototype, \"s\", void 0);\nclass OneAsymmetricKey extends PrivateKeyInfo {\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        context: 1,\n        implicit: true,\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString,\n        optional: true\n    })\n], OneAsymmetricKey.prototype, \"publicKey\", void 0);\nlet EdPrivateKey = class EdPrivateKey {\n    constructor(){\n        this.value = new ArrayBuffer(0);\n    }\n    fromJSON(json) {\n        if (!json.d) {\n            throw new Error(\"d: Missing required property\");\n        }\n        this.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.d);\n        return this;\n    }\n    toJSON() {\n        const jwk = {\n            d: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(this.value)\n        };\n        return jwk;\n    }\n};\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString\n    })\n], EdPrivateKey.prototype, \"value\", void 0);\nEdPrivateKey = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice\n    })\n], EdPrivateKey);\nlet EdPublicKey = class EdPublicKey {\n    constructor(value){\n        this.value = new ArrayBuffer(0);\n        if (value) {\n            this.value = value;\n        }\n    }\n    toJSON() {\n        const json = {\n            x: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBase64Url(this.value)\n        };\n        return json;\n    }\n    fromJSON(json) {\n        if (!(\"x\" in json)) {\n            throw new Error(\"x: Missing required property\");\n        }\n        this.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBase64Url(json.x);\n        return this;\n    }\n};\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString\n    })\n], EdPublicKey.prototype, \"value\", void 0);\nEdPublicKey = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice\n    })\n], EdPublicKey);\nlet CurvePrivateKey = class CurvePrivateKey {\n};\n(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnProp)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString\n    }),\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonProp)({\n        type: _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_2__.JsonPropTypes.String,\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], CurvePrivateKey.prototype, \"d\", void 0);\nCurvePrivateKey = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([\n    (0,_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnType)({\n        type: _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice\n    })\n], CurvePrivateKey);\nconst idSecp256r1 = \"1.2.840.10045.3.1.7\";\nconst idEllipticCurve = \"1.3.132.0\";\nconst idSecp384r1 = `${idEllipticCurve}.34`;\nconst idSecp521r1 = `${idEllipticCurve}.35`;\nconst idSecp256k1 = `${idEllipticCurve}.10`;\nconst idVersionOne = \"1.3.36.3.3.2.8.1.1\";\nconst idBrainpoolP160r1 = `${idVersionOne}.1`;\nconst idBrainpoolP160t1 = `${idVersionOne}.2`;\nconst idBrainpoolP192r1 = `${idVersionOne}.3`;\nconst idBrainpoolP192t1 = `${idVersionOne}.4`;\nconst idBrainpoolP224r1 = `${idVersionOne}.5`;\nconst idBrainpoolP224t1 = `${idVersionOne}.6`;\nconst idBrainpoolP256r1 = `${idVersionOne}.7`;\nconst idBrainpoolP256t1 = `${idVersionOne}.8`;\nconst idBrainpoolP320r1 = `${idVersionOne}.9`;\nconst idBrainpoolP320t1 = `${idVersionOne}.10`;\nconst idBrainpoolP384r1 = `${idVersionOne}.11`;\nconst idBrainpoolP384t1 = `${idVersionOne}.12`;\nconst idBrainpoolP512r1 = `${idVersionOne}.13`;\nconst idBrainpoolP512t1 = `${idVersionOne}.14`;\nconst idX25519 = \"1.3.101.110\";\nconst idX448 = \"1.3.101.111\";\nconst idEd25519 = \"1.3.101.112\";\nconst idEd448 = \"1.3.101.113\";\nvar index$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AlgorithmIdentifier: AlgorithmIdentifier,\n    get CurvePrivateKey () {\n        return CurvePrivateKey;\n    },\n    EcDsaSignature: EcDsaSignature,\n    EcPrivateKey: EcPrivateKey,\n    get EcPublicKey () {\n        return EcPublicKey;\n    },\n    get EdPrivateKey () {\n        return EdPrivateKey;\n    },\n    get EdPublicKey () {\n        return EdPublicKey;\n    },\n    get ObjectIdentifier () {\n        return ObjectIdentifier;\n    },\n    OneAsymmetricKey: OneAsymmetricKey,\n    PrivateKeyInfo: PrivateKeyInfo,\n    PublicKeyInfo: PublicKeyInfo,\n    RsaPrivateKey: RsaPrivateKey,\n    RsaPublicKey: RsaPublicKey,\n    converters: index$2,\n    idBrainpoolP160r1: idBrainpoolP160r1,\n    idBrainpoolP160t1: idBrainpoolP160t1,\n    idBrainpoolP192r1: idBrainpoolP192r1,\n    idBrainpoolP192t1: idBrainpoolP192t1,\n    idBrainpoolP224r1: idBrainpoolP224r1,\n    idBrainpoolP224t1: idBrainpoolP224t1,\n    idBrainpoolP256r1: idBrainpoolP256r1,\n    idBrainpoolP256t1: idBrainpoolP256t1,\n    idBrainpoolP320r1: idBrainpoolP320r1,\n    idBrainpoolP320t1: idBrainpoolP320t1,\n    idBrainpoolP384r1: idBrainpoolP384r1,\n    idBrainpoolP384t1: idBrainpoolP384t1,\n    idBrainpoolP512r1: idBrainpoolP512r1,\n    idBrainpoolP512t1: idBrainpoolP512t1,\n    idEd25519: idEd25519,\n    idEd448: idEd448,\n    idEllipticCurve: idEllipticCurve,\n    idSecp256k1: idSecp256k1,\n    idSecp256r1: idSecp256r1,\n    idSecp384r1: idSecp384r1,\n    idSecp521r1: idSecp521r1,\n    idVersionOne: idVersionOne,\n    idX25519: idX25519,\n    idX448: idX448\n});\nclass EcCurves {\n    constructor(){}\n    static register(item) {\n        const oid = new ObjectIdentifier();\n        oid.value = item.id;\n        const raw = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_1__.AsnConvert.serialize(oid);\n        this.items.push({\n            ...item,\n            raw\n        });\n        this.names.push(item.name);\n    }\n    static find(nameOrId) {\n        nameOrId = nameOrId.toUpperCase();\n        for (const item of this.items){\n            if (item.name.toUpperCase() === nameOrId || item.id.toUpperCase() === nameOrId) {\n                return item;\n            }\n        }\n        return null;\n    }\n    static get(nameOrId) {\n        const res = this.find(nameOrId);\n        if (!res) {\n            throw new Error(`Unsupported EC named curve '${nameOrId}'`);\n        }\n        return res;\n    }\n}\nEcCurves.items = [];\nEcCurves.names = [];\nEcCurves.register({\n    name: \"P-256\",\n    id: idSecp256r1,\n    size: 256\n});\nEcCurves.register({\n    name: \"P-384\",\n    id: idSecp384r1,\n    size: 384\n});\nEcCurves.register({\n    name: \"P-521\",\n    id: idSecp521r1,\n    size: 521\n});\nEcCurves.register({\n    name: \"K-256\",\n    id: idSecp256k1,\n    size: 256\n});\nEcCurves.register({\n    name: \"brainpoolP160r1\",\n    id: idBrainpoolP160r1,\n    size: 160\n});\nEcCurves.register({\n    name: \"brainpoolP160t1\",\n    id: idBrainpoolP160t1,\n    size: 160\n});\nEcCurves.register({\n    name: \"brainpoolP192r1\",\n    id: idBrainpoolP192r1,\n    size: 192\n});\nEcCurves.register({\n    name: \"brainpoolP192t1\",\n    id: idBrainpoolP192t1,\n    size: 192\n});\nEcCurves.register({\n    name: \"brainpoolP224r1\",\n    id: idBrainpoolP224r1,\n    size: 224\n});\nEcCurves.register({\n    name: \"brainpoolP224t1\",\n    id: idBrainpoolP224t1,\n    size: 224\n});\nEcCurves.register({\n    name: \"brainpoolP256r1\",\n    id: idBrainpoolP256r1,\n    size: 256\n});\nEcCurves.register({\n    name: \"brainpoolP256t1\",\n    id: idBrainpoolP256t1,\n    size: 256\n});\nEcCurves.register({\n    name: \"brainpoolP320r1\",\n    id: idBrainpoolP320r1,\n    size: 320\n});\nEcCurves.register({\n    name: \"brainpoolP320t1\",\n    id: idBrainpoolP320t1,\n    size: 320\n});\nEcCurves.register({\n    name: \"brainpoolP384r1\",\n    id: idBrainpoolP384r1,\n    size: 384\n});\nEcCurves.register({\n    name: \"brainpoolP384t1\",\n    id: idBrainpoolP384t1,\n    size: 384\n});\nEcCurves.register({\n    name: \"brainpoolP512r1\",\n    id: idBrainpoolP512r1,\n    size: 512\n});\nEcCurves.register({\n    name: \"brainpoolP512t1\",\n    id: idBrainpoolP512t1,\n    size: 512\n});\nclass X25519Provider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"X25519\";\n        this.usages = {\n            privateKey: [\n                \"deriveKey\",\n                \"deriveBits\"\n            ],\n            publicKey: []\n        };\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"public\");\n    }\n}\nclass Ed25519Provider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"Ed25519\";\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n    }\n}\nclass HmacProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"HMAC\";\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n        this.usages = [\n            \"sign\",\n            \"verify\"\n        ];\n    }\n    getDefaultLength(algName) {\n        switch(algName.toUpperCase()){\n            case \"SHA-1\":\n            case \"SHA-256\":\n            case \"SHA-384\":\n            case \"SHA-512\":\n                return 512;\n            default:\n                throw new Error(`Unknown algorithm name '${algName}'`);\n        }\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n        if (\"length\" in algorithm) {\n            if (typeof algorithm.length !== \"number\") {\n                throw new TypeError(\"length: Is not a Number\");\n            }\n            if (algorithm.length < 1) {\n                throw new RangeError(\"length: Number is out of range\");\n            }\n        }\n    }\n    checkImportParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    }\n}\nclass Pbkdf2Provider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"PBKDF2\";\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n        this.usages = [\n            \"deriveBits\",\n            \"deriveKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n        this.checkRequiredProperty(algorithm, \"salt\");\n        if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        this.checkRequiredProperty(algorithm, \"iterations\");\n        if (typeof algorithm.iterations !== \"number\") {\n            throw new TypeError(\"iterations: Is not a Number\");\n        }\n        if (algorithm.iterations < 1) {\n            throw new TypeError(\"iterations: Is less than 1\");\n        }\n    }\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\n        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args);\n        if (extractable) {\n            throw new SyntaxError(\"extractable: Must be 'false'\");\n        }\n    }\n}\nclass HkdfProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"HKDF\";\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n        this.usages = [\n            \"deriveKey\",\n            \"deriveBits\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n        this.checkRequiredProperty(algorithm, \"salt\");\n        if (!pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.isBufferSource(algorithm.salt)) {\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        this.checkRequiredProperty(algorithm, \"info\");\n        if (!pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.isBufferSource(algorithm.info)) {\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n    }\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\n        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args);\n        if (extractable) {\n            throw new SyntaxError(\"extractable: Must be 'false'\");\n        }\n    }\n}\nclass ShakeProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.usages = [];\n        this.defaultLength = 0;\n    }\n    digest(...args) {\n        args[0] = {\n            length: this.defaultLength,\n            ...args[0]\n        };\n        return super.digest.apply(this, args);\n    }\n    checkDigest(algorithm, data) {\n        super.checkDigest(algorithm, data);\n        const length = algorithm.length || 0;\n        if (typeof length !== \"number\") {\n            throw new TypeError(\"length: Is not a Number\");\n        }\n        if (length < 0) {\n            throw new TypeError(\"length: Is negative\");\n        }\n    }\n}\nclass Shake128Provider extends ShakeProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"shake128\";\n        this.defaultLength = 16;\n    }\n}\nclass Shake256Provider extends ShakeProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"shake256\";\n        this.defaultLength = 32;\n    }\n}\nclass Crypto {\n    get [Symbol.toStringTag]() {\n        return \"Crypto\";\n    }\n    randomUUID() {\n        const b = this.getRandomValues(new Uint8Array(16));\n        b[6] = b[6] & 0x0f | 0x40;\n        b[8] = b[8] & 0x3f | 0x80;\n        const uuid = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(b).toLowerCase();\n        return `${uuid.substring(0, 8)}-${uuid.substring(8, 12)}-${uuid.substring(12, 16)}-${uuid.substring(16, 20)}-${uuid.substring(20)}`;\n    }\n}\nclass ProviderStorage {\n    constructor(){\n        this.items = {};\n    }\n    get(algorithmName) {\n        return this.items[algorithmName.toLowerCase()] || null;\n    }\n    set(provider) {\n        this.items[provider.name.toLowerCase()] = provider;\n    }\n    removeAt(algorithmName) {\n        const provider = this.get(algorithmName.toLowerCase());\n        if (provider) {\n            delete this.items[algorithmName];\n        }\n        return provider;\n    }\n    has(name) {\n        return !!this.get(name);\n    }\n    get length() {\n        return Object.keys(this.items).length;\n    }\n    get algorithms() {\n        const algorithms = [];\n        for(const key in this.items){\n            const provider = this.items[key];\n            algorithms.push(provider.name);\n        }\n        return algorithms.sort();\n    }\n}\nconst keyFormatMap = {\n    \"jwk\": [\n        \"private\",\n        \"public\",\n        \"secret\"\n    ],\n    \"pkcs8\": [\n        \"private\"\n    ],\n    \"spki\": [\n        \"public\"\n    ],\n    \"raw\": [\n        \"secret\",\n        \"public\"\n    ]\n};\nconst sourceBufferKeyFormats = [\n    \"pkcs8\",\n    \"spki\",\n    \"raw\"\n];\nclass SubtleCrypto {\n    constructor(){\n        this.providers = new ProviderStorage();\n    }\n    static isHashedAlgorithm(data) {\n        return data && typeof data === \"object\" && \"name\" in data && \"hash\" in data ? true : false;\n    }\n    get [Symbol.toStringTag]() {\n        return \"SubtleCrypto\";\n    }\n    async digest(...args) {\n        this.checkRequiredArguments(args, 2, \"digest\");\n        const [algorithm, data, ...params] = args;\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.digest(preparedAlgorithm, preparedData, ...params);\n        return result;\n    }\n    async generateKey(...args) {\n        this.checkRequiredArguments(args, 3, \"generateKey\");\n        const [algorithm, extractable, keyUsages, ...params] = args;\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.generateKey({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, extractable, keyUsages, ...params);\n        return result;\n    }\n    async sign(...args) {\n        this.checkRequiredArguments(args, 3, \"sign\");\n        const [algorithm, key, data, ...params] = args;\n        this.checkCryptoKey(key);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.sign({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, key, preparedData, ...params);\n        return result;\n    }\n    async verify(...args) {\n        this.checkRequiredArguments(args, 4, \"verify\");\n        const [algorithm, key, signature, data, ...params] = args;\n        this.checkCryptoKey(key);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);\n        const preparedSignature = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(signature);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.verify({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, key, preparedSignature, preparedData, ...params);\n        return result;\n    }\n    async encrypt(...args) {\n        this.checkRequiredArguments(args, 3, \"encrypt\");\n        const [algorithm, key, data, ...params] = args;\n        this.checkCryptoKey(key);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.encrypt({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, key, preparedData, {\n            keyUsage: true\n        }, ...params);\n        return result;\n    }\n    async decrypt(...args) {\n        this.checkRequiredArguments(args, 3, \"decrypt\");\n        const [algorithm, key, data, ...params] = args;\n        this.checkCryptoKey(key);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(data);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.decrypt({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, key, preparedData, {\n            keyUsage: true\n        }, ...params);\n        return result;\n    }\n    async deriveBits(...args) {\n        this.checkRequiredArguments(args, 3, \"deriveBits\");\n        const [algorithm, baseKey, length, ...params] = args;\n        this.checkCryptoKey(baseKey);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.deriveBits({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, baseKey, length, {\n            keyUsage: true\n        }, ...params);\n        return result;\n    }\n    async deriveKey(...args) {\n        this.checkRequiredArguments(args, 5, \"deriveKey\");\n        const [algorithm, baseKey, derivedKeyType, extractable, keyUsages, ...params] = args;\n        const preparedDerivedKeyType = this.prepareAlgorithm(derivedKeyType);\n        const importProvider = this.getProvider(preparedDerivedKeyType.name);\n        importProvider.checkDerivedKeyParams(preparedDerivedKeyType);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        provider.checkCryptoKey(baseKey, \"deriveKey\");\n        const derivedBits = await provider.deriveBits({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, baseKey, derivedKeyType.length || 512, {\n            keyUsage: false\n        }, ...params);\n        return this.importKey(\"raw\", derivedBits, derivedKeyType, extractable, keyUsages, ...params);\n    }\n    async exportKey(...args) {\n        this.checkRequiredArguments(args, 2, \"exportKey\");\n        const [format, key, ...params] = args;\n        this.checkCryptoKey(key);\n        if (!keyFormatMap[format]) {\n            throw new TypeError(\"Invalid keyFormat argument\");\n        }\n        if (!keyFormatMap[format].includes(key.type)) {\n            throw new DOMException(\"The key is not of the expected type\");\n        }\n        const provider = this.getProvider(key.algorithm.name);\n        const result = await provider.exportKey(format, key, ...params);\n        return result;\n    }\n    async importKey(...args) {\n        this.checkRequiredArguments(args, 5, \"importKey\");\n        const [format, keyData, algorithm, extractable, keyUsages, ...params] = args;\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        if (format === \"jwk\") {\n            if (typeof keyData !== \"object\" || !keyData.kty) {\n                throw new TypeError(\"Key data must be an object for JWK import\");\n            }\n        } else if (sourceBufferKeyFormats.includes(format)) {\n            if (!pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.isBufferSource(keyData)) {\n                throw new TypeError(\"Key data must be a BufferSource for non-JWK formats\");\n            }\n        } else {\n            throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView or JsonWebKey)'\");\n        }\n        return provider.importKey(format, keyData, {\n            ...preparedAlgorithm,\n            name: provider.name\n        }, extractable, keyUsages, ...params);\n    }\n    async wrapKey(format, key, wrappingKey, wrapAlgorithm, ...args) {\n        let keyData = await this.exportKey(format, key, ...args);\n        if (format === \"jwk\") {\n            const json = JSON.stringify(keyData);\n            keyData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromUtf8String(json);\n        }\n        const preparedAlgorithm = this.prepareAlgorithm(wrapAlgorithm);\n        const preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(keyData);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        return provider.encrypt({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, wrappingKey, preparedData, {\n            keyUsage: false\n        }, ...args);\n    }\n    async unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages, ...args) {\n        const preparedAlgorithm = this.prepareAlgorithm(unwrapAlgorithm);\n        const preparedData = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(wrappedKey);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        let keyData = await provider.decrypt({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, unwrappingKey, preparedData, {\n            keyUsage: false\n        }, ...args);\n        if (format === \"jwk\") {\n            try {\n                keyData = JSON.parse(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToUtf8String(keyData));\n            } catch (e) {\n                const error = new TypeError(\"wrappedKey: Is not a JSON\");\n                error.internal = e;\n                throw error;\n            }\n        }\n        return this.importKey(format, keyData, unwrappedKeyAlgorithm, extractable, keyUsages, ...args);\n    }\n    checkRequiredArguments(args, size, methodName) {\n        if (args.length < size) {\n            throw new TypeError(`Failed to execute '${methodName}' on 'SubtleCrypto': ${size} arguments required, but only ${args.length} present`);\n        }\n    }\n    prepareAlgorithm(algorithm) {\n        if (typeof algorithm === \"string\") {\n            return {\n                name: algorithm\n            };\n        }\n        if (SubtleCrypto.isHashedAlgorithm(algorithm)) {\n            const preparedAlgorithm = {\n                ...algorithm\n            };\n            preparedAlgorithm.hash = this.prepareAlgorithm(algorithm.hash);\n            return preparedAlgorithm;\n        }\n        return {\n            ...algorithm\n        };\n    }\n    getProvider(name) {\n        const provider = this.providers.get(name);\n        if (!provider) {\n            throw new AlgorithmError(\"Unrecognized name\");\n        }\n        return provider;\n    }\n    checkCryptoKey(key) {\n        if (!(key instanceof CryptoKey)) {\n            throw new TypeError(`Key is not of type 'CryptoKey'`);\n        }\n    }\n}\nvar index = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    converters: index$3\n});\nconst REQUIRED_FIELDS = [\n    \"crv\",\n    \"e\",\n    \"k\",\n    \"kty\",\n    \"n\",\n    \"x\",\n    \"y\"\n];\nclass JwkUtils {\n    static async thumbprint(hash, jwk, crypto) {\n        const data = this.format(jwk, true);\n        return crypto.subtle.digest(hash, pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromBinary(JSON.stringify(data)));\n    }\n    static format(jwk, remove = false) {\n        let res = Object.entries(jwk);\n        if (remove) {\n            res = res.filter((o)=>REQUIRED_FIELDS.includes(o[0]));\n        }\n        res = res.sort(([keyA], [keyB])=>keyA > keyB ? 1 : keyA < keyB ? -1 : 0);\n        return Object.fromEntries(res);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/webcrypto-core/build/webcrypto-core.es.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/webcrypto-core/node_modules/tslib/tslib.es6.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/webcrypto-core/node_modules/tslib/tslib.es6.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),\n/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __propKey: () => (/* binding */ __propKey),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),\n/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\n;\nfunction __runInitializers(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++){\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n}\n;\nfunction __propKey(x) {\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\n;\nfunction __setFunctionName(f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\n;\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar __createBinding = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction __exportStar(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\n/** @deprecated */ function __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\n/** @deprecated */ function __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nvar __setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldIn(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nfunction __addDisposableResource(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n        var dispose, inner;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n            if (async) inner = dispose;\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        if (inner) dispose = function() {\n            try {\n                inner.call(this);\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        };\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) {\n        env.stack.push({\n            async: true\n        });\n    }\n    return value;\n}\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction __disposeResources(env) {\n    function fail(e) {\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n        env.hasError = true;\n    }\n    var r, s = 0;\n    function next() {\n        while(r = env.stack.pop()){\n            try {\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n                if (r.dispose) {\n                    var result = r.dispose.call(r.value);\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {\n                        fail(e);\n                        return next();\n                    });\n                } else s |= 1;\n            } catch (e) {\n                fail(e);\n            }\n        }\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n        if (env.hasError) throw env.error;\n    }\n    return next();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    __extends,\n    __assign,\n    __rest,\n    __decorate,\n    __param,\n    __metadata,\n    __awaiter,\n    __generator,\n    __createBinding,\n    __exportStar,\n    __values,\n    __read,\n    __spread,\n    __spreadArrays,\n    __spreadArray,\n    __await,\n    __asyncGenerator,\n    __asyncDelegator,\n    __asyncValues,\n    __makeTemplateObject,\n    __importStar,\n    __importDefault,\n    __classPrivateFieldGet,\n    __classPrivateFieldSet,\n    __classPrivateFieldIn,\n    __addDisposableResource,\n    __disposeResources\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/webcrypto-core/node_modules/tslib/tslib.es6.mjs\n");

/***/ })

};
;