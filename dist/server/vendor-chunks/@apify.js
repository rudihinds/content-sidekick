"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@apify";
exports.ids = ["vendor-chunks/@apify"];
exports.modules = {

/***/ "(rsc)/./node_modules/@apify/consts/cjs/index.cjs":
/*!**************************************************!*\
  !*** ./node_modules/@apify/consts/cjs/index.cjs ***!
  \**************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    ACTOR_BUILD_ARGS: ()=>ACTOR_BUILD_ARGS,\n    ACTOR_CATEGORIES: ()=>ACTOR_CATEGORIES,\n    ACTOR_ENV_VARS: ()=>ACTOR_ENV_VARS,\n    ACTOR_EVENT_NAMES: ()=>ACTOR_EVENT_NAMES,\n    ACTOR_JOB_STATUSES: ()=>ACTOR_JOB_STATUSES,\n    ACTOR_JOB_TERMINAL_STATUSES: ()=>ACTOR_JOB_TERMINAL_STATUSES,\n    ACTOR_JOB_TYPES: ()=>ACTOR_JOB_TYPES,\n    ACTOR_LIMITS: ()=>ACTOR_LIMITS,\n    ACTOR_NAME: ()=>ACTOR_NAME,\n    ACTOR_RESTART_ON_ERROR: ()=>ACTOR_RESTART_ON_ERROR,\n    ACTOR_SOURCE_TYPES: ()=>ACTOR_SOURCE_TYPES,\n    ACTOR_TYPES: ()=>ACTOR_TYPES,\n    ACT_JOB_STATUSES: ()=>ACT_JOB_STATUSES,\n    ACT_JOB_TERMINAL_STATUSES: ()=>ACT_JOB_TERMINAL_STATUSES,\n    ACT_JOB_TYPES: ()=>ACT_JOB_TYPES,\n    ACT_RESTART_ON_ERROR: ()=>ACT_RESTART_ON_ERROR,\n    ACT_SOURCE_TYPES: ()=>ACT_SOURCE_TYPES,\n    ACT_TYPES: ()=>ACT_TYPES,\n    ALL_ACTOR_CATEGORIES: ()=>ALL_ACTOR_CATEGORIES,\n    ANONYMOUS_USERNAME: ()=>ANONYMOUS_USERNAME,\n    APIFY_ENV_VARS: ()=>APIFY_ENV_VARS,\n    APIFY_ID_REGEX: ()=>APIFY_ID_REGEX,\n    APIFY_PROXY_VALUE_REGEX: ()=>APIFY_PROXY_VALUE_REGEX,\n    BUILD_TAG_LATEST: ()=>BUILD_TAG_LATEST,\n    COMMA_SEPARATED_EMAILS_REGEX: ()=>COMMA_SEPARATED_EMAILS_REGEX,\n    COMMA_SEPARATED_EMAILS_REGEX_STR: ()=>COMMA_SEPARATED_EMAILS_REGEX_STR,\n    COMPUTE_UNIT_MB: ()=>COMPUTE_UNIT_MB,\n    COMPUTE_UNIT_MILLIS: ()=>COMPUTE_UNIT_MILLIS,\n    CONTACT_LINK_REGEX: ()=>CONTACT_LINK_REGEX,\n    DEFAULT_ACTOR_STANDBY_PORT: ()=>DEFAULT_ACTOR_STANDBY_PORT,\n    DEFAULT_CONTAINER_PORT: ()=>DEFAULT_CONTAINER_PORT,\n    DEFAULT_PLATFORM_LIMITS: ()=>DEFAULT_PLATFORM_LIMITS,\n    DNS_SAFE_NAME_MAX_LENGTH: ()=>DNS_SAFE_NAME_MAX_LENGTH,\n    DNS_SAFE_NAME_REGEX: ()=>DNS_SAFE_NAME_REGEX,\n    DOCKER_LABELS: ()=>DOCKER_LABELS,\n    EMAIL_REGEX: ()=>EMAIL_REGEX,\n    EMAIL_REGEX_STR: ()=>EMAIL_REGEX_STR,\n    ENV_VARS: ()=>ENV_VARS,\n    FINISHED_PROJECT_STATUSES: ()=>FINISHED_PROJECT_STATUSES,\n    FREE_SUBSCRIPTION_PLAN_CODE: ()=>FREE_SUBSCRIPTION_PLAN_CODE,\n    GITHUB_GIST_URL_REGEX: ()=>GITHUB_GIST_URL_REGEX,\n    GITHUB_REGEX: ()=>GITHUB_REGEX,\n    GIT_MAIN_BRANCH: ()=>GIT_MAIN_BRANCH,\n    GIT_REPO_REGEX: ()=>GIT_REPO_REGEX,\n    HTTP_URL_REGEX: ()=>HTTP_URL_REGEX,\n    INTEGER_ENV_VARS: ()=>INTEGER_ENV_VARS,\n    ISSUES_STATUS_ALL: ()=>ISSUES_STATUS_ALL,\n    ISSUES_STATUS_TYPES: ()=>ISSUES_STATUS_TYPES,\n    KEY_VALUE_STORE_KEYS: ()=>KEY_VALUE_STORE_KEYS,\n    KEY_VALUE_STORE_KEY_REGEX: ()=>KEY_VALUE_STORE_KEY_REGEX,\n    LINKEDIN_PROFILE_REGEX: ()=>LINKEDIN_PROFILE_REGEX,\n    LOCAL_ACTOR_ENV_VARS: ()=>LOCAL_ACTOR_ENV_VARS,\n    LOCAL_APIFY_ENV_VARS: ()=>LOCAL_APIFY_ENV_VARS,\n    LOCAL_ENV_VARS: ()=>LOCAL_ENV_VARS,\n    LOCAL_STORAGE_SUBDIRS: ()=>LOCAL_STORAGE_SUBDIRS,\n    MARKETPLACE_USER_ROLES: ()=>MARKETPLACE_USER_ROLES,\n    MAX_MULTIFILE_BYTES: ()=>MAX_MULTIFILE_BYTES,\n    MAX_PAYLOAD_SIZE_BYTES: ()=>MAX_PAYLOAD_SIZE_BYTES,\n    META_ORIGINS: ()=>META_ORIGINS,\n    ME_USER_NAME_PLACEHOLDER: ()=>ME_USER_NAME_PLACEHOLDER,\n    PROJECT_STATUSES: ()=>PROJECT_STATUSES,\n    PROXY_URL_REGEX: ()=>PROXY_URL_REGEX,\n    RELATIVE_URL_REGEX: ()=>RELATIVE_URL_REGEX,\n    REQUEST_QUEUE_HEAD_MAX_LIMIT: ()=>REQUEST_QUEUE_HEAD_MAX_LIMIT,\n    REQUEST_QUEUE_MAX_REQUESTS_PER_BATCH_OPERATION: ()=>REQUEST_QUEUE_MAX_REQUESTS_PER_BATCH_OPERATION,\n    SHORT_CRAWLER_ID_LENGTH: ()=>SHORT_CRAWLER_ID_LENGTH,\n    SOURCE_FILE_FORMATS: ()=>SOURCE_FILE_FORMATS,\n    SPLIT_PATH_REGEX: ()=>SPLIT_PATH_REGEX,\n    TWITTER_REGEX: ()=>TWITTER_REGEX,\n    URL_REGEX: ()=>URL_REGEX,\n    USERNAME: ()=>USERNAME,\n    USER_BASIC_TEXT_XSS_OPTIONS: ()=>USER_BASIC_TEXT_XSS_OPTIONS,\n    USER_PERSONA_TYPES: ()=>USER_PERSONA_TYPES,\n    VERSION_INT_MAJOR_BASE: ()=>VERSION_INT_MAJOR_BASE,\n    VERSION_INT_MINOR_BASE: ()=>VERSION_INT_MINOR_BASE,\n    WEBHOOK_ALLOWED_PAYLOAD_VARIABLES: ()=>WEBHOOK_ALLOWED_PAYLOAD_VARIABLES,\n    WEBHOOK_DEFAULT_PAYLOAD_TEMPLATE: ()=>WEBHOOK_DEFAULT_PAYLOAD_TEMPLATE,\n    WEBHOOK_DISPATCH_STATUSES: ()=>WEBHOOK_DISPATCH_STATUSES,\n    WEBHOOK_EVENT_TYPES: ()=>WEBHOOK_EVENT_TYPES,\n    WEBHOOK_EVENT_TYPE_GROUPS: ()=>WEBHOOK_EVENT_TYPE_GROUPS,\n    WORKER_SERVICE_TYPES: ()=>WORKER_SERVICE_TYPES\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/regexs.ts\nvar namePartSubRegexStr = \"[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+\";\nvar nameSubRegexStr = `${namePartSubRegexStr}(?:\\\\.${namePartSubRegexStr})*`;\nvar domainPartSubRegexStr = \"[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\";\nvar domainSubRegexStr = `${domainPartSubRegexStr}(?:\\\\.${domainPartSubRegexStr})+`;\nvar EMAIL_REGEX_STR = `${nameSubRegexStr}@${domainSubRegexStr}`;\nvar EMAIL_REGEX = new RegExp(`^${EMAIL_REGEX_STR}$`);\nvar COMMA_SEPARATED_EMAILS_REGEX_STR = `(${EMAIL_REGEX_STR})( *, *${EMAIL_REGEX_STR})*`;\nvar COMMA_SEPARATED_EMAILS_REGEX = new RegExp(`^${COMMA_SEPARATED_EMAILS_REGEX_STR}$`);\nvar GIT_REPO_REGEX = /^(?:git|ssh|https?|git@[-\\w.]+):(\\/\\/)?(.*?)(\\/?|#[-\\d\\w._:/]+?)$/;\nvar DNS_SAFE_NAME_REGEX = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])$/;\nvar APIFY_PROXY_VALUE_REGEX = /^[\\w._~]+$/;\nvar PROXY_URL_REGEX = /^https?:\\/\\/(([^:]+:)?[^@]*@)?[^.:@]+\\.[^:]+:[\\d]+?$/;\nvar KEY_VALUE_STORE_KEY_REGEX = /^([a-zA-Z0-9!\\-_.'()]{1,256})$/;\nvar GITHUB_REGEX_STR = \"[a-z\\\\d](?:[a-z\\\\d]|-(?=[a-z\\\\d])){0,38}\";\nvar TWITTER_REGEX = /^@[a-z0-9_]{1,15}$/i;\nvar GITHUB_REGEX = new RegExp(`^${GITHUB_REGEX_STR}$`, \"i\");\nvar LINKEDIN_PROFILE_REGEX = /^(https?:\\/\\/)?(www\\.)?([a-z]{2}\\.)?linkedin.com\\/(in|company)\\/([A-Za-z0-9_-]+)\\/?$/;\nvar URL_REGEX = /^https?:\\/\\//i;\nvar HTTP_URL_REGEX = new RegExp(\"^(?:(?:(?:https?):)?\\\\/\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z0-9\\\\u00a1-\\\\uffff][a-z0-9\\\\u00a1-\\\\uffff_-]{0,62})?[a-z0-9\\\\u00a1-\\\\uffff]\\\\.)+(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?|xn--[a-z0-9]+))(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$\", \"i\");\nvar GITHUB_GIST_URL_REGEX = new RegExp(`^https:\\\\/\\\\/gist\\\\.github\\\\.com\\\\/${GITHUB_REGEX_STR}\\\\/[0-9a-f]{32}$`, \"i\");\nvar SPLIT_PATH_REGEX = /[^/]+/g;\nvar RELATIVE_URL_REGEX = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\|\\/\\/).*/i;\nvar CONTACT_LINK_REGEX = /^(mailto|tel|sms):.*$/i;\nvar APIFY_ID_REGEX = /[a-zA-Z0-9]{17}/;\n// src/consts.ts\nvar FREE_SUBSCRIPTION_PLAN_CODE = \"DEV\";\nvar ACTOR_JOB_TYPES = {\n    BUILD: \"BUILD\",\n    RUN: \"RUN\"\n};\nvar ACTOR_SOURCE_TYPES = {\n    SOURCE_CODE: \"SOURCE_CODE\",\n    SOURCE_FILES: \"SOURCE_FILES\",\n    GIT_REPO: \"GIT_REPO\",\n    TARBALL: \"TARBALL\",\n    GITHUB_GIST: \"GITHUB_GIST\"\n};\nvar ACTOR_EVENT_NAMES = {\n    CPU_INFO: \"cpuInfo\",\n    SYSTEM_INFO: \"systemInfo\",\n    MIGRATING: \"migrating\",\n    PERSIST_STATE: \"persistState\",\n    ABORTING: \"aborting\"\n};\nvar ACTOR_JOB_STATUSES = {\n    READY: \"READY\",\n    // started but not allocated to any worker yet\n    RUNNING: \"RUNNING\",\n    // running on worker\n    SUCCEEDED: \"SUCCEEDED\",\n    // finished and all good\n    FAILED: \"FAILED\",\n    // run or build failed\n    TIMING_OUT: \"TIMING-OUT\",\n    // timing out now\n    TIMED_OUT: \"TIMED-OUT\",\n    // timed out\n    ABORTING: \"ABORTING\",\n    // being aborted by user\n    ABORTED: \"ABORTED\"\n};\nvar WEBHOOK_DISPATCH_STATUSES = {\n    ACTIVE: \"ACTIVE\",\n    // Attempting to deliver the webhook\n    SUCCEEDED: \"SUCCEEDED\",\n    // Webhook was delivered\n    FAILED: \"FAILED\"\n};\nvar ACTOR_JOB_TERMINAL_STATUSES = [\n    ACTOR_JOB_STATUSES.SUCCEEDED,\n    ACTOR_JOB_STATUSES.FAILED,\n    ACTOR_JOB_STATUSES.TIMED_OUT,\n    ACTOR_JOB_STATUSES.ABORTED\n];\nvar WORKER_SERVICE_TYPES = {\n    CRAWLING: \"crawling\",\n    ACTOR: \"actor\"\n};\nvar META_ORIGINS = {\n    DEVELOPMENT: \"DEVELOPMENT\",\n    // Job started from Developer console in Source section of actor\n    WEB: \"WEB\",\n    // Job started from other place on the website (either console or task detail page)\n    API: \"API\",\n    // Job started through API\n    SCHEDULER: \"SCHEDULER\",\n    // Job started through Scheduler\n    TEST: \"TEST\",\n    // Job started through test actor page\n    WEBHOOK: \"WEBHOOK\",\n    // Job started by the webhook\n    ACTOR: \"ACTOR\",\n    // Job started by another actor run\n    CLI: \"CLI\",\n    // Job started by apify CLI\n    STANDBY: \"STANDBY\"\n};\nvar DOCKER_LABELS = {\n    ACTOR_BUILD_ID: \"com.apify.actBuildId\",\n    ACTOR_RUN_ID: \"com.apify.actRunId\",\n    // Kept for backwards compatibility, will be removed soon (TODO: remove old usages!)\n    /** @deprecated Use ACTOR_BUILD_ID instead! */ ACT_BUILD_ID: \"com.apify.actBuildId\",\n    /** @deprecated Use ACTOR_RUN_ID instead! */ ACT_RUN_ID: \"com.apify.actRunId\"\n};\nvar ACTOR_TYPES = {\n    ACT: \"acts\",\n    CRAWLER: \"crawlers\"\n};\nvar ANONYMOUS_USERNAME = \"anonymous\";\nvar USERNAME = {\n    MIN_LENGTH: 3,\n    MAX_LENGTH: 30,\n    // Regex matching a potentially allowed username. The numbers must match MIN and MAX!\n    // Note that username must also pass isForbiddenUser() test to be allowed!\n    REGEX: /^[a-zA-Z0-9_.-]{3,30}$/\n};\nvar DNS_SAFE_NAME_MAX_LENGTH = 63;\nvar ACTOR_NAME = {\n    MIN_LENGTH: 3,\n    MAX_LENGTH: DNS_SAFE_NAME_MAX_LENGTH,\n    // DNS-safe string length\n    REGEX: DNS_SAFE_NAME_REGEX\n};\nvar SHORT_CRAWLER_ID_LENGTH = 5;\nvar BUILD_TAG_LATEST = \"latest\";\nvar ACTOR_RESTART_ON_ERROR = {\n    MAX_RESTARTS: 3,\n    // This needs to be low enough so that it only covers restart loops, rather than e.g.\n    // errors during crawling of large lists of URLs\n    INTERVAL_MILLIS: 1 * 60 * 1e3\n};\nvar ACT_RESTART_ON_ERROR = ACTOR_RESTART_ON_ERROR;\nvar ACT_JOB_TYPES = ACTOR_JOB_TYPES;\nvar ACT_SOURCE_TYPES = ACTOR_SOURCE_TYPES;\nvar ACT_JOB_STATUSES = ACTOR_JOB_STATUSES;\nvar ACT_JOB_TERMINAL_STATUSES = ACTOR_JOB_TERMINAL_STATUSES;\nvar ACT_TYPES = ACTOR_TYPES;\nvar COMPUTE_UNIT_MB = 1024;\nvar COMPUTE_UNIT_MILLIS = 60 * 60 * 1e3;\nvar ACTOR_LIMITS = {\n    // The actualy used limit is taken from private package @apify-packages/consts\n    BUILD_DEFAULT_MEMORY_MBYTES: 4096,\n    // Maximum duration of build in seconds.\n    BUILD_TIMEOUT_SECS: 1800,\n    // For each build or run container, set disk quota based on memory size\n    RUN_DISK_TO_MEMORY_SIZE_COEFF: 2,\n    // For each build or run container, set CPU cores based on memory size\n    RUN_MEMORY_MBYTES_PER_CPU_CORE: 4096,\n    // The default limit of memory for all running Actor jobs for free accounts.\n    FREE_ACCOUNT_MAX_MEMORY_MBYTES: 8192,\n    // The default limit of memory for all running Actor jobs for paid accounts.\n    PAID_ACCOUNT_MAX_MEMORY_MBYTES: 65536,\n    // Minimum and maximum memory for a single act run.\n    MIN_RUN_MEMORY_MBYTES: 128,\n    MAX_RUN_MEMORY_MBYTES: 32768,\n    // Maximum size of actor input schema.\n    INPUT_SCHEMA_MAX_BYTES: 500 * 1024,\n    // Max length of run/build log in number of characters\n    LOG_MAX_CHARS: 10 * 1024 * 1024\n};\nvar DEFAULT_PLATFORM_LIMITS = {\n    // Maximum number of actors per user\n    MAX_ACTORS_PER_USER: 500,\n    // Maximum number of tasks per user\n    MAX_TASKS_PER_USER: 5e3,\n    // Maximum number of schedules per user\n    MAX_SCHEDULES_PER_USER: 100,\n    // Maximum number of webhooks per user\n    MAX_WEBHOOKS_PER_USER: 100,\n    // Maximum number of concurrent actor runs per user for free accounts.\n    FREE_ACCOUNT_MAX_CONCURRENT_ACTOR_RUNS_PER_USER: 25,\n    // Maximum number of concurrent actor runs per user for paid accounts.\n    PAID_ACCOUNT_MAX_CONCURRENT_ACTOR_RUNS_PER_USER: 250,\n    // Maximum number of actors per scheduler\n    MAX_ACTORS_PER_SCHEDULER: 10,\n    // Maximum number of tasks per scheduler\n    MAX_TASKS_PER_SCHEDULER: 10\n};\nvar ME_USER_NAME_PLACEHOLDER = \"me\";\nvar REQUEST_QUEUE_HEAD_MAX_LIMIT = 1e3;\nvar APIFY_ENV_VARS = {\n    API_BASE_URL: \"APIFY_API_BASE_URL\",\n    API_PUBLIC_BASE_URL: \"APIFY_API_PUBLIC_BASE_URL\",\n    CHROME_EXECUTABLE_PATH: \"APIFY_CHROME_EXECUTABLE_PATH\",\n    DEDICATED_CPUS: \"APIFY_DEDICATED_CPUS\",\n    DISABLE_OUTDATED_WARNING: \"APIFY_DISABLE_OUTDATED_WARNING\",\n    FACT: \"APIFY_FACT\",\n    HEADLESS: \"APIFY_HEADLESS\",\n    INPUT_SECRETS_PRIVATE_KEY_FILE: \"APIFY_INPUT_SECRETS_PRIVATE_KEY_FILE\",\n    INPUT_SECRETS_PRIVATE_KEY_PASSPHRASE: \"APIFY_INPUT_SECRETS_PRIVATE_KEY_PASSPHRASE\",\n    IS_AT_HOME: \"APIFY_IS_AT_HOME\",\n    LOCAL_STORAGE_DIR: \"APIFY_LOCAL_STORAGE_DIR\",\n    LOG_LEVEL: \"APIFY_LOG_LEVEL\",\n    LOG_FORMAT: \"APIFY_LOG_FORMAT\",\n    META_ORIGIN: \"APIFY_META_ORIGIN\",\n    METAMORPH_AFTER_SLEEP_MILLIS: \"APIFY_METAMORPH_AFTER_SLEEP_MILLIS\",\n    PERSIST_STATE_INTERVAL_MILLIS: \"APIFY_PERSIST_STATE_INTERVAL_MILLIS\",\n    PROXY_PASSWORD: \"APIFY_PROXY_PASSWORD\",\n    PROXY_HOSTNAME: \"APIFY_PROXY_HOSTNAME\",\n    PROXY_PORT: \"APIFY_PROXY_PORT\",\n    PROXY_STATUS_URL: \"APIFY_PROXY_STATUS_URL\",\n    PURGE_ON_START: \"APIFY_PURGE_ON_START\",\n    SDK_LATEST_VERSION: \"APIFY_SDK_LATEST_VERSION\",\n    SYSTEM_INFO_INTERVAL_MILLIS: \"APIFY_SYSTEM_INFO_INTERVAL_MILLIS\",\n    TOKEN: \"APIFY_TOKEN\",\n    USER_ID: \"APIFY_USER_ID\",\n    WORKFLOW_KEY: \"APIFY_WORKFLOW_KEY\",\n    XVFB: \"APIFY_XVFB\",\n    // Replaced by ACTOR_ENV_VARS, kept for backward compatibility:\n    ACTOR_BUILD_ID: \"APIFY_ACTOR_BUILD_ID\",\n    ACTOR_BUILD_NUMBER: \"APIFY_ACTOR_BUILD_NUMBER\",\n    ACTOR_EVENTS_WS_URL: \"APIFY_ACTOR_EVENTS_WS_URL\",\n    ACTOR_ID: \"APIFY_ACTOR_ID\",\n    ACTOR_MAX_PAID_DATASET_ITEMS: \"ACTOR_MAX_PAID_DATASET_ITEMS\",\n    ACTOR_RUN_ID: \"APIFY_ACTOR_RUN_ID\",\n    ACTOR_TASK_ID: \"APIFY_ACTOR_TASK_ID\",\n    CONTAINER_PORT: \"APIFY_CONTAINER_PORT\",\n    CONTAINER_URL: \"APIFY_CONTAINER_URL\",\n    DEFAULT_DATASET_ID: \"APIFY_DEFAULT_DATASET_ID\",\n    DEFAULT_KEY_VALUE_STORE_ID: \"APIFY_DEFAULT_KEY_VALUE_STORE_ID\",\n    DEFAULT_REQUEST_QUEUE_ID: \"APIFY_DEFAULT_REQUEST_QUEUE_ID\",\n    INPUT_KEY: \"APIFY_INPUT_KEY\",\n    MEMORY_MBYTES: \"APIFY_MEMORY_MBYTES\",\n    STARTED_AT: \"APIFY_STARTED_AT\",\n    TIMEOUT_AT: \"APIFY_TIMEOUT_AT\",\n    // Deprecated, keep them for backward compatibility:\n    ACT_ID: \"APIFY_ACT_ID\",\n    ACT_RUN_ID: \"APIFY_ACT_RUN_ID\"\n};\nvar ENV_VARS = APIFY_ENV_VARS;\nvar ACTOR_ENV_VARS = {\n    BUILD_ID: \"ACTOR_BUILD_ID\",\n    BUILD_NUMBER: \"ACTOR_BUILD_NUMBER\",\n    DEFAULT_DATASET_ID: \"ACTOR_DEFAULT_DATASET_ID\",\n    DEFAULT_KEY_VALUE_STORE_ID: \"ACTOR_DEFAULT_KEY_VALUE_STORE_ID\",\n    DEFAULT_REQUEST_QUEUE_ID: \"ACTOR_DEFAULT_REQUEST_QUEUE_ID\",\n    EVENTS_WEBSOCKET_URL: \"ACTOR_EVENTS_WEBSOCKET_URL\",\n    ID: \"ACTOR_ID\",\n    INPUT_KEY: \"ACTOR_INPUT_KEY\",\n    MAX_PAID_DATASET_ITEMS: \"ACTOR_MAX_PAID_DATASET_ITEMS\",\n    MEMORY_MBYTES: \"ACTOR_MEMORY_MBYTES\",\n    RUN_ID: \"ACTOR_RUN_ID\",\n    STANDBY_PORT: \"ACTOR_STANDBY_PORT\",\n    STANDBY_URL: \"ACTOR_STANDBY_URL\",\n    STARTED_AT: \"ACTOR_STARTED_AT\",\n    TASK_ID: \"ACTOR_TASK_ID\",\n    TIMEOUT_AT: \"ACTOR_TIMEOUT_AT\",\n    WEB_SERVER_PORT: \"ACTOR_WEB_SERVER_PORT\",\n    WEB_SERVER_URL: \"ACTOR_WEB_SERVER_URL\"\n};\nvar INTEGER_ENV_VARS = [\n    // Actor env vars\n    ACTOR_ENV_VARS.MAX_PAID_DATASET_ITEMS,\n    ACTOR_ENV_VARS.MEMORY_MBYTES,\n    ACTOR_ENV_VARS.STANDBY_PORT,\n    ACTOR_ENV_VARS.WEB_SERVER_PORT,\n    // Apify env vars\n    APIFY_ENV_VARS.ACTOR_MAX_PAID_DATASET_ITEMS,\n    APIFY_ENV_VARS.CONTAINER_PORT,\n    APIFY_ENV_VARS.DEDICATED_CPUS,\n    APIFY_ENV_VARS.MEMORY_MBYTES,\n    APIFY_ENV_VARS.METAMORPH_AFTER_SLEEP_MILLIS,\n    APIFY_ENV_VARS.PERSIST_STATE_INTERVAL_MILLIS,\n    APIFY_ENV_VARS.PROXY_PORT,\n    APIFY_ENV_VARS.SYSTEM_INFO_INTERVAL_MILLIS\n];\nvar ACTOR_BUILD_ARGS = {\n    ACTOR_PATH_IN_DOCKER_CONTEXT: \"ACTOR_PATH_IN_DOCKER_CONTEXT\"\n};\nvar DEFAULT_CONTAINER_PORT = 4321;\nvar DEFAULT_ACTOR_STANDBY_PORT = DEFAULT_CONTAINER_PORT;\nvar LOCAL_STORAGE_SUBDIRS = {\n    datasets: \"datasets\",\n    keyValueStores: \"key_value_stores\",\n    requestQueues: \"request_queues\"\n};\nvar LOCAL_ACTOR_ENV_VARS = {\n    [ACTOR_ENV_VARS.STANDBY_PORT]: DEFAULT_CONTAINER_PORT.toString(),\n    [ACTOR_ENV_VARS.DEFAULT_DATASET_ID]: \"default\",\n    [ACTOR_ENV_VARS.DEFAULT_KEY_VALUE_STORE_ID]: \"default\",\n    [ACTOR_ENV_VARS.DEFAULT_REQUEST_QUEUE_ID]: \"default\",\n    [ACTOR_ENV_VARS.WEB_SERVER_PORT]: DEFAULT_CONTAINER_PORT.toString(),\n    [ACTOR_ENV_VARS.WEB_SERVER_URL]: `http://localhost:${DEFAULT_CONTAINER_PORT}`\n};\nvar LOCAL_APIFY_ENV_VARS = {\n    [APIFY_ENV_VARS.CONTAINER_PORT]: LOCAL_ACTOR_ENV_VARS.ACTOR_WEB_SERVER_PORT,\n    [APIFY_ENV_VARS.CONTAINER_URL]: LOCAL_ACTOR_ENV_VARS.ACTOR_WEB_SERVER_URL,\n    [APIFY_ENV_VARS.DEFAULT_DATASET_ID]: LOCAL_ACTOR_ENV_VARS.ACTOR_DEFAULT_DATASET_ID,\n    [APIFY_ENV_VARS.DEFAULT_KEY_VALUE_STORE_ID]: LOCAL_ACTOR_ENV_VARS.ACTOR_DEFAULT_KEY_VALUE_STORE_ID,\n    [APIFY_ENV_VARS.DEFAULT_REQUEST_QUEUE_ID]: LOCAL_ACTOR_ENV_VARS.ACTOR_DEFAULT_REQUEST_QUEUE_ID,\n    [APIFY_ENV_VARS.PROXY_HOSTNAME]: \"proxy.apify.com\",\n    [APIFY_ENV_VARS.PROXY_PORT]: 8e3.toString()\n};\nvar LOCAL_ENV_VARS = LOCAL_APIFY_ENV_VARS;\nvar KEY_VALUE_STORE_KEYS = {\n    INPUT: \"INPUT\",\n    OUTPUT: \"OUTPUT\"\n};\nvar MAX_PAYLOAD_SIZE_BYTES = 9437184;\nvar ACTOR_CATEGORIES = {\n    AI: \"AI\",\n    AUTOMATION: \"Automation\",\n    BUSINESS: \"Business\",\n    COVID_19: \"Covid-19\",\n    DEVELOPER_EXAMPLES: \"Developer examples\",\n    DEVELOPER_TOOLS: \"Developer tools\",\n    ECOMMERCE: \"E-commerce\",\n    FOR_CREATORS: \"For creators\",\n    GAMES: \"Games\",\n    JOBS: \"Jobs\",\n    LEAD_GENERATION: \"Lead generation\",\n    MARKETING: \"Marketing\",\n    NEWS: \"News\",\n    SEO_TOOLS: \"SEO tools\",\n    SOCIAL_MEDIA: \"Social media\",\n    TRAVEL: \"Travel\",\n    VIDEOS: \"Videos\",\n    REAL_ESTATE: \"Real estate\",\n    SPORTS: \"Sports\",\n    EDUCATION: \"Education\",\n    INTEGRATIONS: \"Integrations\",\n    OTHER: \"Other\"\n};\nvar ALL_ACTOR_CATEGORIES = {\n    ...ACTOR_CATEGORIES\n};\nvar VERSION_INT_MAJOR_BASE = 1e7;\nvar VERSION_INT_MINOR_BASE = 1e5;\nvar USER_BASIC_TEXT_XSS_OPTIONS = {\n    whiteList: {\n        a: [\n            \"href\",\n            \"title\",\n            \"target\"\n        ],\n        code: [],\n        strong: [],\n        b: [],\n        br: [],\n        ul: [],\n        li: [],\n        ol: [],\n        i: [],\n        u: [],\n        p: []\n    }\n};\nvar WEBHOOK_EVENT_TYPES = {\n    ACTOR_RUN_CREATED: \"ACTOR.RUN.CREATED\",\n    ACTOR_RUN_SUCCEEDED: \"ACTOR.RUN.SUCCEEDED\",\n    ACTOR_RUN_FAILED: \"ACTOR.RUN.FAILED\",\n    ACTOR_RUN_TIMED_OUT: \"ACTOR.RUN.TIMED_OUT\",\n    ACTOR_RUN_ABORTED: \"ACTOR.RUN.ABORTED\",\n    ACTOR_RUN_RESURRECTED: \"ACTOR.RUN.RESURRECTED\",\n    ACTOR_BUILD_CREATED: \"ACTOR.BUILD.CREATED\",\n    ACTOR_BUILD_SUCCEEDED: \"ACTOR.BUILD.SUCCEEDED\",\n    ACTOR_BUILD_FAILED: \"ACTOR.BUILD.FAILED\",\n    ACTOR_BUILD_TIMED_OUT: \"ACTOR.BUILD.TIMED_OUT\",\n    ACTOR_BUILD_ABORTED: \"ACTOR.BUILD.ABORTED\",\n    TEST: \"TEST\"\n};\nvar WEBHOOK_EVENT_TYPE_GROUPS = {\n    ACTOR_RUN: [\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_CREATED,\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_SUCCEEDED,\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_FAILED,\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_TIMED_OUT,\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_ABORTED,\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_RESURRECTED\n    ],\n    ACTOR_BUILD: [\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_CREATED,\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_SUCCEEDED,\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_FAILED,\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_TIMED_OUT,\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_ABORTED\n    ],\n    // If one of these occurs then we can be sure that none other can occur for the same triggerer.\n    ACTOR_RUN_TERMINAL: [\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_SUCCEEDED,\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_FAILED,\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_TIMED_OUT,\n        WEBHOOK_EVENT_TYPES.ACTOR_RUN_ABORTED\n    ],\n    ACTOR_BUILD_TERMINAL: [\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_SUCCEEDED,\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_FAILED,\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_TIMED_OUT,\n        WEBHOOK_EVENT_TYPES.ACTOR_BUILD_ABORTED\n    ]\n};\nvar WEBHOOK_DEFAULT_PAYLOAD_TEMPLATE = `{\n    \"userId\": {{userId}},\n    \"createdAt\": {{createdAt}},\n    \"eventType\": {{eventType}},\n    \"eventData\": {{eventData}},\n    \"resource\": {{resource}}\n}`;\nvar WEBHOOK_ALLOWED_PAYLOAD_VARIABLES = /* @__PURE__ */ new Set([\n    \"userId\",\n    \"createdAt\",\n    \"eventType\",\n    \"eventData\",\n    \"resource\"\n]);\nvar MAX_MULTIFILE_BYTES = 3 * 1024 ** 2;\nvar SOURCE_FILE_FORMATS = {\n    TEXT: \"TEXT\",\n    BASE64: \"BASE64\"\n};\nvar PROJECT_STATUSES = {\n    REQUEST: \"REQUEST\",\n    SPECIFICATION: \"SPECIFICATION\",\n    OFFERS: \"OFFERS\",\n    DEPOSIT: \"DEPOSIT\",\n    DEPOSIT_PAID: \"DEPOSIT_PAID\",\n    NEW: \"NEW\",\n    IN_PROGRESS: \"IN_PROGRESS\",\n    QA: \"QA\",\n    CUSTOMER_QA: \"CUSTOMER_QA\",\n    READY_FOR_INVOICE: \"READY_FOR_INVOICE\",\n    INVOICED: \"INVOICED\",\n    PAID: \"PAID\",\n    DELIVERED: \"DELIVERED\",\n    CLOSED: \"CLOSED\",\n    FINISHED: \"FINISHED\"\n};\nvar FINISHED_PROJECT_STATUSES = [\n    PROJECT_STATUSES.READY_FOR_INVOICE,\n    PROJECT_STATUSES.INVOICED,\n    PROJECT_STATUSES.PAID,\n    PROJECT_STATUSES.DELIVERED,\n    PROJECT_STATUSES.FINISHED\n];\nvar MARKETPLACE_USER_ROLES = {\n    DEVELOPER: \"DEVELOPER\",\n    DATA_EXPERT: \"DATA_EXPERT\",\n    CUSTOMER: \"CUSTOMER\"\n};\nvar USER_PERSONA_TYPES = {\n    DEVELOPER: \"DEVELOPER\",\n    USER: \"USER\"\n};\nvar GIT_MAIN_BRANCH = \"main\";\nvar REQUEST_QUEUE_MAX_REQUESTS_PER_BATCH_OPERATION = 25;\nvar ISSUES_STATUS_TYPES = {\n    OPEN: \"OPEN\",\n    CLOSED: \"CLOSED\"\n};\nvar ISSUES_STATUS_ALL = \"ALL\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0); //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apify/consts/cjs/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apify/log/cjs/index.cjs":
/*!***********************************************!*\
  !*** ./node_modules/@apify/log/cjs/index.cjs ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    IS_APIFY_LOGGER_EXCEPTION: ()=>IS_APIFY_LOGGER_EXCEPTION,\n    LEVELS: ()=>LEVELS,\n    LEVEL_TO_STRING: ()=>LEVEL_TO_STRING,\n    Log: ()=>Log,\n    LogFormat: ()=>LogFormat,\n    LogLevel: ()=>LogLevel,\n    Logger: ()=>Logger,\n    LoggerJson: ()=>LoggerJson,\n    LoggerText: ()=>LoggerText,\n    PREFIX_DELIMITER: ()=>PREFIX_DELIMITER,\n    default: ()=>src_default,\n    getFormatFromEnv: ()=>getFormatFromEnv,\n    getLevelFromEnv: ()=>getLevelFromEnv,\n    limitDepth: ()=>limitDepth,\n    truncate: ()=>truncate\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/log_consts.ts\nvar LogLevel = /* @__PURE__ */ ((LogLevel2)=>{\n    LogLevel2[LogLevel2[\"OFF\"] = 0] = \"OFF\";\n    LogLevel2[LogLevel2[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel2[LogLevel2[\"SOFT_FAIL\"] = 2] = \"SOFT_FAIL\";\n    LogLevel2[LogLevel2[\"WARNING\"] = 3] = \"WARNING\";\n    LogLevel2[LogLevel2[\"INFO\"] = 4] = \"INFO\";\n    LogLevel2[LogLevel2[\"DEBUG\"] = 5] = \"DEBUG\";\n    LogLevel2[LogLevel2[\"PERF\"] = 6] = \"PERF\";\n    return LogLevel2;\n})(LogLevel || {});\nvar LogFormat = /* @__PURE__ */ ((LogFormat2)=>{\n    LogFormat2[\"JSON\"] = \"JSON\";\n    LogFormat2[\"TEXT\"] = \"TEXT\";\n    return LogFormat2;\n})(LogFormat || {});\nvar PREFIX_DELIMITER = \":\";\nvar LEVELS = LogLevel;\nvar LEVEL_TO_STRING = Object.keys(LogLevel).filter((x)=>Number.isNaN(+x));\nvar IS_APIFY_LOGGER_EXCEPTION = Symbol(\"apify.processed_error\");\n// src/log_helpers.ts\nvar import_consts = __webpack_require__(/*! @apify/consts */ \"(rsc)/./node_modules/@apify/consts/cjs/index.cjs\");\nfunction truncate(str, maxLength, suffix = \"...[truncated]\") {\n    maxLength = Math.floor(maxLength);\n    if (suffix.length > maxLength) {\n        throw new Error(\"suffix string cannot be longer than maxLength\");\n    }\n    if (typeof str === \"string\" && str.length > maxLength) {\n        str = str.substr(0, maxLength - suffix.length) + suffix;\n    }\n    return str;\n}\n__name(truncate, \"truncate\");\nfunction getLevelFromEnv() {\n    const envVar = process.env[import_consts.APIFY_ENV_VARS.LOG_LEVEL];\n    if (!envVar) return 4 /* INFO */ ;\n    if (Number.isFinite(+envVar)) return +envVar;\n    if (LogLevel[envVar]) return LogLevel[envVar];\n    return +envVar;\n}\n__name(getLevelFromEnv, \"getLevelFromEnv\");\nfunction getFormatFromEnv() {\n    const envVar = process.env[import_consts.APIFY_ENV_VARS.LOG_FORMAT] || \"TEXT\" /* TEXT */ ;\n    switch(envVar.toLowerCase()){\n        case \"JSON\" /* JSON */ .toLowerCase():\n            return \"JSON\" /* JSON */ ;\n        case \"TEXT\" /* TEXT */ .toLowerCase():\n            return \"TEXT\" /* TEXT */ ;\n        default:\n            console.warn(`Unknown value for environment variable ${import_consts.APIFY_ENV_VARS.LOG_FORMAT}: ${envVar}`);\n            return \"TEXT\" /* TEXT */ ;\n    }\n}\n__name(getFormatFromEnv, \"getFormatFromEnv\");\nfunction limitDepth(record, depth, maxStringLength) {\n    if (typeof record === \"string\") {\n        return maxStringLength && record.length > maxStringLength ? truncate(record, maxStringLength) : record;\n    }\n    if ([\n        \"number\",\n        \"boolean\",\n        \"symbol\",\n        \"bigint\"\n    ].includes(typeof record) || record == null || record instanceof Date) {\n        return record;\n    }\n    if (record instanceof Error) {\n        const { name, message, stack, cause, ...rest } = record;\n        record = {\n            name,\n            message,\n            stack,\n            cause,\n            ...rest,\n            [IS_APIFY_LOGGER_EXCEPTION]: true\n        };\n    }\n    const nextCall = /* @__PURE__ */ __name((rec)=>limitDepth(rec, depth - 1, maxStringLength), \"nextCall\");\n    if (Array.isArray(record)) {\n        return depth ? record.map(nextCall) : \"[array]\";\n    }\n    if (typeof record === \"object\" && record !== null) {\n        const mapObject = /* @__PURE__ */ __name((obj)=>{\n            const res = {};\n            Reflect.ownKeys(obj).forEach((key)=>{\n                res[key] = nextCall(obj[key]);\n            });\n            return res;\n        }, \"mapObject\");\n        return depth ? mapObject(record) : \"[object]\";\n    }\n    if (typeof record === \"function\") {\n        return \"[function]\";\n    }\n    console.log(`WARNING: Object cannot be logged: ${record}`);\n    return void 0;\n}\n__name(limitDepth, \"limitDepth\");\n// src/logger.ts\nvar import_events = __webpack_require__(/*! events */ \"events\");\nvar _Logger = class _Logger extends import_events.EventEmitter {\n    constructor(options){\n        super();\n        this.options = options;\n    }\n    setOptions(options) {\n        this.options = {\n            ...this.options,\n            ...options\n        };\n    }\n    getOptions() {\n        return this.options;\n    }\n    _outputWithConsole(level, line) {\n        switch(level){\n            case 1 /* ERROR */ :\n                console.error(line);\n                break;\n            case 3 /* WARNING */ :\n                console.warn(line);\n                break;\n            case 5 /* DEBUG */ :\n                console.debug(line);\n                break;\n            default:\n                console.log(line);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _log(level, message, data, exception, opts = {}) {\n        throw new Error(\"log() method must be implemented!\");\n    }\n    log(level, message, ...args) {\n        const line = this._log(level, message, ...args);\n        this.emit(\"line\", line);\n    }\n};\n__name(_Logger, \"Logger\");\nvar Logger = _Logger;\n// src/logger_json.ts\nvar DEFAULT_OPTIONS = {\n    skipLevelInfo: false,\n    skipTime: false\n};\nvar _LoggerJson = class _LoggerJson extends Logger {\n    constructor(options = {}){\n        super({\n            ...DEFAULT_OPTIONS,\n            ...options\n        });\n    }\n    _log(level, message, data, exception, opts = {}) {\n        const { prefix, suffix } = opts;\n        if (exception) data = {\n            ...data,\n            exception\n        };\n        if (prefix) message = `${prefix}${PREFIX_DELIMITER} ${message}`;\n        if (suffix) message = `${message} ${suffix}`;\n        const rec = {\n            time: !this.options.skipTime ? /* @__PURE__ */ new Date() : void 0,\n            level: this.options.skipLevelInfo && level === 4 /* INFO */  ? void 0 : LogLevel[level],\n            msg: message,\n            ...data\n        };\n        const line = JSON.stringify(rec);\n        this._outputWithConsole(level, line);\n        return line;\n    }\n};\n__name(_LoggerJson, \"LoggerJson\");\nvar LoggerJson = _LoggerJson;\n// src/logger_text.ts\nvar import_ansi_colors2 = __toESM(__webpack_require__(/*! ansi-colors */ \"(rsc)/./node_modules/ansi-colors/index.js\"));\n// src/node_internals.ts\nvar import_ansi_colors = __toESM(__webpack_require__(/*! ansi-colors */ \"(rsc)/./node_modules/ansi-colors/index.js\"));\nfunction identicalSequenceRange(a, b) {\n    for(let i = 0; i < a.length - 3; i++){\n        const pos = b.indexOf(a[i]);\n        if (pos !== -1) {\n            const rest = b.length - pos;\n            if (rest > 3) {\n                let len = 1;\n                const maxLen = Math.min(a.length - i, rest);\n                while(maxLen > len && a[i + len] === b[pos + len]){\n                    len++;\n                }\n                if (len > 3) {\n                    return {\n                        len,\n                        offset: i\n                    };\n                }\n            }\n        }\n    }\n    return {\n        len: 0,\n        offset: 0\n    };\n}\n__name(identicalSequenceRange, \"identicalSequenceRange\");\nfunction getStackString(error) {\n    return error.stack ? String(error.stack) : Error.prototype.toString.call(error);\n}\n__name(getStackString, \"getStackString\");\nfunction getStackFrames(err, stack) {\n    const frames = stack.split(\"\\n\");\n    let cause;\n    try {\n        ({ cause } = err);\n    } catch  {}\n    if (cause != null && typeof cause === \"object\" && IS_APIFY_LOGGER_EXCEPTION in cause) {\n        const causeStack = getStackString(cause);\n        const causeStackStart = causeStack.indexOf(\"\\n    at\");\n        if (causeStackStart !== -1) {\n            const causeFrames = causeStack.slice(causeStackStart + 1).split(\"\\n\");\n            const { len, offset } = identicalSequenceRange(frames, causeFrames);\n            if (len > 0) {\n                const skipped = len - 2;\n                const msg = `    ... ${skipped} lines matching cause stack trace ...`;\n                frames.splice(offset + 1, skipped, import_ansi_colors.default.grey(msg));\n            }\n        }\n    }\n    return frames;\n}\n__name(getStackFrames, \"getStackFrames\");\n// src/logger_text.ts\nvar SHORTEN_LEVELS = {\n    SOFT_FAIL: \"SFAIL\",\n    WARNING: \"WARN\"\n};\nvar LEVEL_TO_COLOR = {\n    [1 /* ERROR */ ]: \"red\",\n    [2 /* SOFT_FAIL */ ]: \"red\",\n    [3 /* WARNING */ ]: \"yellow\",\n    [4 /* INFO */ ]: \"green\",\n    [5 /* DEBUG */ ]: \"blue\",\n    [6 /* PERF */ ]: \"magenta\"\n};\nvar SHORTENED_LOG_LEVELS = LEVEL_TO_STRING.map((level)=>SHORTEN_LEVELS[level] || level);\nvar MAX_LEVEL_LENGTH_SPACES = Math.max(...SHORTENED_LOG_LEVELS.map((l)=>l.length));\nvar getLevelIndent = /* @__PURE__ */ __name((level)=>{\n    let spaces = \"\";\n    for(let i = 0; i < MAX_LEVEL_LENGTH_SPACES - level.length; i++)spaces += \" \";\n    return spaces;\n}, \"getLevelIndent\");\nvar DEFAULT_OPTIONS2 = {\n    skipTime: true\n};\nvar _LoggerText = class _LoggerText extends Logger {\n    constructor(options = {}){\n        super({\n            ...DEFAULT_OPTIONS2,\n            ...options\n        });\n    }\n    _log(level, message, data, exception, opts = {}) {\n        let { prefix, suffix } = opts;\n        let maybeDate = \"\";\n        if (!this.options.skipTime) {\n            maybeDate = `${/* @__PURE__ */ new Date().toISOString().replace(\"Z\", \"\").replace(\"T\", \" \")} `;\n        }\n        const errStack = exception ? this._parseException(exception) : \"\";\n        const color = LEVEL_TO_COLOR[level];\n        const levelStr = SHORTENED_LOG_LEVELS[level];\n        const levelIndent = getLevelIndent(levelStr);\n        const dataStr = !data ? \"\" : ` ${JSON.stringify(data)}`;\n        prefix = prefix ? ` ${prefix}${PREFIX_DELIMITER}` : \"\";\n        suffix = suffix ? ` ${suffix}` : \"\";\n        const line = `${import_ansi_colors2.default.gray(maybeDate)}${import_ansi_colors2.default[color](levelStr)}${levelIndent}${import_ansi_colors2.default.yellow(prefix)} ${message || \"\"}${import_ansi_colors2.default.gray(dataStr)}${import_ansi_colors2.default.yellow(suffix)}${errStack}`;\n        this._outputWithConsole(level, line);\n        return line;\n    }\n    _parseException(exception, indentLevel = 1) {\n        if ([\n            \"string\",\n            \"boolean\",\n            \"number\",\n            \"undefined\",\n            \"bigint\"\n        ].includes(typeof exception)) {\n            return `\n${exception}`;\n        }\n        if (exception === null) {\n            return \"\\nnull\";\n        }\n        if (typeof exception === \"symbol\") {\n            return `\n${exception.toString()}`;\n        }\n        if (typeof exception === \"object\" && IS_APIFY_LOGGER_EXCEPTION in exception) {\n            return this._parseLoggerException(exception, indentLevel);\n        }\n        return `\n${JSON.stringify(exception, null, 2)}`;\n    }\n    _parseLoggerException(exception, indentLevel = 1) {\n        const errDetails = [];\n        if (exception.type) {\n            errDetails.push(`type=${exception.type}`);\n        }\n        if (exception.details) {\n            Object.entries(exception.details).map(([key, val])=>errDetails.push(`${key}=${val}`));\n        }\n        const errorString = exception.stack || exception.reason || exception.message;\n        const isStack = errorString === exception.stack;\n        const errorLines = getStackFrames(exception, errorString);\n        if (isStack) {\n            errorLines[0] = exception.message || errorLines[0];\n        }\n        if (errDetails.length) {\n            errorLines[0] += import_ansi_colors2.default.gray(`(details: ${errDetails.join(\", \")})`);\n        }\n        for(let i = 1; i < errorLines.length; i++){\n            errorLines[i] = import_ansi_colors2.default.gray(errorLines[i]);\n        }\n        if (exception.cause) {\n            const causeString = this._parseException(exception.cause, indentLevel + 1);\n            const causeLines = causeString.trim().split(\"\\n\");\n            errorLines.push(import_ansi_colors2.default.red(`  CAUSE: ${import_ansi_colors2.default.reset(causeLines[0])}`), ...causeLines.slice(1));\n        }\n        return `\n${errorLines.map((line)=>`${\" \".repeat(indentLevel * 2)}${line}`).join(\"\\n\")}`;\n    }\n};\n__name(_LoggerText, \"LoggerText\");\nvar LoggerText = _LoggerText;\n// src/log.ts\nvar getLoggerForFormat = /* @__PURE__ */ __name((format)=>{\n    switch(format){\n        case \"JSON\" /* JSON */ :\n            return new LoggerJson();\n        case \"TEXT\" /* TEXT */ :\n        default:\n            return new LoggerText();\n    }\n}, \"getLoggerForFormat\");\nvar getDefaultOptions = /* @__PURE__ */ __name(()=>({\n        level: getLevelFromEnv(),\n        maxDepth: 4,\n        maxStringLength: 2e3,\n        prefix: null,\n        suffix: null,\n        logger: getLoggerForFormat(getFormatFromEnv()),\n        data: {}\n    }), \"getDefaultOptions\");\nvar _Log = class _Log {\n    constructor(options = {}){\n        /**\n     * Map of available log levels that's useful for easy setting of appropriate log levels.\n     * Each log level is represented internally by a number. Eg. `log.LEVELS.DEBUG === 5`.\n     */ __publicField(this, \"LEVELS\", LogLevel);\n        // for BC\n        __publicField(this, \"options\");\n        __publicField(this, \"warningsOnceLogged\", /* @__PURE__ */ new Set());\n        this.options = {\n            ...getDefaultOptions(),\n            ...options\n        };\n        if (!LogLevel[this.options.level]) throw new Error('Options \"level\" must be one of log.LEVELS enum!');\n        if (typeof this.options.maxDepth !== \"number\") throw new Error('Options \"maxDepth\" must be a number!');\n        if (typeof this.options.maxStringLength !== \"number\") throw new Error('Options \"maxStringLength\" must be a number!');\n        if (this.options.prefix && typeof this.options.prefix !== \"string\") throw new Error('Options \"prefix\" must be a string!');\n        if (this.options.suffix && typeof this.options.suffix !== \"string\") throw new Error('Options \"suffix\" must be a string!');\n        if (typeof this.options.logger !== \"object\") throw new Error('Options \"logger\" must be an object!');\n        if (typeof this.options.data !== \"object\") throw new Error('Options \"data\" must be an object!');\n    }\n    _limitDepth(obj) {\n        return limitDepth(obj, this.options.maxDepth);\n    }\n    /**\n   * Returns the currently selected logging level. This is useful for checking whether a message\n   * will actually be printed to the console before one actually performs a resource intensive operation\n   * to construct the message, such as querying a DB for some metadata that need to be added. If the log\n   * level is not high enough at the moment, it doesn't make sense to execute the query.\n   */ getLevel() {\n        return this.options.level;\n    }\n    /**\n   * Sets the log level to the given value, preventing messages from less important log levels\n   * from being printed to the console. Use in conjunction with the `log.LEVELS` constants such as\n   *\n   * ```\n   * log.setLevel(log.LEVELS.DEBUG);\n   * ```\n   *\n   * Default log level is INFO.\n   */ setLevel(level) {\n        if (!LogLevel[level]) throw new Error('Options \"level\" must be one of log.LEVELS enum!');\n        this.options.level = level;\n    }\n    internal(level, message, data, exception) {\n        if (level > this.options.level) return;\n        data = {\n            ...this.options.data,\n            ...data\n        };\n        data = Reflect.ownKeys(data).length > 0 ? this._limitDepth(data) : void 0;\n        exception = this._limitDepth(exception);\n        this.options.logger.log(level, message, data, exception, {\n            prefix: this.options.prefix,\n            suffix: this.options.suffix\n        });\n    }\n    /**\n   * Configures logger.\n   */ setOptions(options) {\n        this.options = {\n            ...this.options,\n            ...options\n        };\n    }\n    /**\n   * Returns the logger configuration.\n   */ getOptions() {\n        return {\n            ...this.options\n        };\n    }\n    /**\n   * Creates a new instance of logger that inherits settings from a parent logger.\n   */ child(options) {\n        let { prefix } = this.options;\n        if (options.prefix) {\n            prefix = prefix ? `${prefix}${PREFIX_DELIMITER}${options.prefix}` : options.prefix;\n        }\n        const data = options.data ? {\n            ...this.options.data,\n            ...options.data\n        } : this.options.data;\n        const newOptions = {\n            ...this.options,\n            ...options,\n            prefix,\n            data\n        };\n        return new _Log(newOptions);\n    }\n    /**\n   * Logs an `ERROR` message. Use this method to log error messages that are not directly connected\n   * to an exception. For logging exceptions, use the `log.exception` method.\n   */ error(message, data) {\n        this.internal(1 /* ERROR */ , message, data);\n    }\n    /**\n   * Logs an `ERROR` level message with a nicely formatted exception. Note that the exception is the first parameter\n   * here and an additional message is only optional.\n   */ exception(exception, message, data) {\n        this.internal(1 /* ERROR */ , message, data, exception);\n    }\n    softFail(message, data) {\n        this.internal(2 /* SOFT_FAIL */ , message, data);\n    }\n    /**\n   * Logs a `WARNING` level message. Data are stringified and appended to the message.\n   */ warning(message, data) {\n        this.internal(3 /* WARNING */ , message, data);\n    }\n    /**\n   * Logs an `INFO` message. `INFO` is the default log level so info messages will be always logged,\n   * unless the log level is changed. Data are stringified and appended to the message.\n   */ info(message, data) {\n        this.internal(4 /* INFO */ , message, data);\n    }\n    /**\n   * Logs a `DEBUG` message. By default, it will not be written to the console. To see `DEBUG`\n   * messages in the console, set the log level to `DEBUG` either using the `log.setLevel(log.LEVELS.DEBUG)`\n   * method or using the environment variable `APIFY_LOG_LEVEL=DEBUG`. Data are stringified and appended\n   * to the message.\n   */ debug(message, data) {\n        this.internal(5 /* DEBUG */ , message, data);\n    }\n    perf(message, data) {\n        this.internal(6 /* PERF */ , message, data);\n    }\n    /**\n   * Logs a `WARNING` level message only once.\n   */ warningOnce(message) {\n        if (this.warningsOnceLogged.has(message)) return;\n        this.warningsOnceLogged.add(message);\n        this.warning(message);\n    }\n    /**\n   * Logs given message only once as WARNING. It's used to warn user that some feature he is using has been deprecated.\n   */ deprecated(message) {\n        this.warningOnce(message);\n    }\n};\n__name(_Log, \"Log\");\nvar Log = _Log;\n// src/index.ts\nvar log = new Log();\nvar src_default = log;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0); //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apify/log/cjs/index.cjs\n");

/***/ })

};
;